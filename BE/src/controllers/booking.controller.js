const RepairRequest = require("../model/repairRequest.model");
const Service = require("../model/service.model");
const Technician = require("../model/technician.model");
const { decodeToken } = require("../services/tokenDecode");
const mongoose = require("mongoose");
const jwt = require("jsonwebtoken");

// Helper function ƒë·ªÉ t·∫°o m√£ ƒë∆°n h√†ng
const generateOrderCode = async () => {
  const today = new Date();
  const year = today.getFullYear().toString().slice(-2); // 2024 -> 24
  const month = (today.getMonth() + 1).toString().padStart(2, "0"); // 01, 02, ..., 12
  const day = today.getDate().toString().padStart(2, "0"); // 01, 02, ..., 31

  const datePrefix = `RC${year}${month}${day}`; // RC240703

  // T√¨m ƒë∆°n h√†ng cu·ªëi c√πng trong ng√†y ƒë·ªÉ l·∫•y s·ªë th·ª© t·ª±
  const startOfDay = new Date(today);
  startOfDay.setHours(0, 0, 0, 0);

  const endOfDay = new Date(today);
  endOfDay.setHours(23, 59, 59, 999);

  const lastOrder = await RepairRequest.findOne({
    orderCode: { $regex: `^${datePrefix}` },
    createdAt: { $gte: startOfDay, $lte: endOfDay },
  }).sort({ orderCode: -1 });

  let orderNumber = 1;
  if (lastOrder) {
    // L·∫•y 3 s·ªë cu·ªëi t·ª´ m√£ ƒë∆°n h√†ng v√† tƒÉng l√™n 1
    const lastNumber = parseInt(lastOrder.orderCode.slice(-3));
    orderNumber = lastNumber + 1;
  }

  // Format: RC240703001, RC240703002, ...
  const orderCode = `${datePrefix}${orderNumber.toString().padStart(3, "0")}`;

  return orderCode;
};

// Helper function ƒë·ªÉ parse date t·ª´ nhi·ªÅu format kh√°c nhau
const parseDate = (dateString) => {
  console.log("Parsing date:", dateString, "type:", typeof dateString);

  if (!dateString) {
    throw new Error("Date string is required");
  }

  // Convert to string if needed
  const dateStr = dateString.toString().trim();

  // Handle different date formats
  let parts;
  let day, month, year;

  // Format: dd/mm/yyyy
  if (dateStr.includes("/")) {
    parts = dateStr.split("/");
    if (parts.length === 3) {
      day = parseInt(parts[0], 10);
      month = parseInt(parts[1], 10) - 1; // Month is 0-indexed
      year = parseInt(parts[2], 10);
    }
  }
  // Format: dd-mm-yyyy
  else if (dateStr.includes("-")) {
    parts = dateStr.split("-");
    if (parts.length === 3) {
      // Check if it's dd-mm-yyyy or yyyy-mm-dd
      if (parts[0].length === 4) {
        // yyyy-mm-dd
        year = parseInt(parts[0], 10);
        month = parseInt(parts[1], 10) - 1;
        day = parseInt(parts[2], 10);
      } else {
        // dd-mm-yyyy
        day = parseInt(parts[0], 10);
        month = parseInt(parts[1], 10) - 1;
        year = parseInt(parts[2], 10);
      }
    }
  }
  // Format: yyyy-mm-dd (ISO format)
  else if (/^\d{4}-\d{2}-\d{2}/.test(dateStr)) {
    const isoDate = new Date(dateStr);
    if (!isNaN(isoDate.getTime())) {
      return isoDate;
    }
  }

  if (!day || !month === undefined || !year) {
    throw new Error(
      `Invalid date format: "${dateStr}". Expected formats: dd/mm/yyyy, dd-mm-yyyy, or yyyy-mm-dd`
    );
  }

  const resultDate = new Date(year, month, day);
  console.log("Parsed date result:", resultDate);

  // Validate the date
  if (isNaN(resultDate.getTime())) {
    throw new Error(
      `Invalid date: day=${day}, month=${month + 1}, year=${year}`
    );
  }

  return resultDate;
};

// Helper function ƒë·ªÉ parse time t·ª´ format HH:mm - HH:mm v√† l·∫•y th·ªùi gian b·∫Øt ƒë·∫ßu
const parseTime = (timeString) => {
  console.log("Parsing time:", timeString, "type:", typeof timeString);

  if (!timeString) {
    throw new Error("Time string is required");
  }

  const timeStr = timeString.toString().trim();

  // Handle format: HH:mm - HH:mm
  if (timeStr.includes(" - ")) {
    const timeParts = timeStr.split(" - ");
    const startTime = timeParts[0].trim();
    const [hours, minutes] = startTime
      .split(":")
      .map((num) => parseInt(num, 10));

    if (
      isNaN(hours) ||
      isNaN(minutes) ||
      hours < 0 ||
      hours > 23 ||
      minutes < 0 ||
      minutes > 59
    ) {
      throw new Error(`Invalid time format: "${startTime}". Expected HH:mm`);
    }

    return { hours, minutes };
  }
  // Handle format: HH:mm (single time)
  else if (timeStr.includes(":")) {
    const [hours, minutes] = timeStr.split(":").map((num) => parseInt(num, 10));

    if (
      isNaN(hours) ||
      isNaN(minutes) ||
      hours < 0 ||
      hours > 23 ||
      minutes < 0 ||
      minutes > 59
    ) {
      throw new Error(`Invalid time format: "${timeStr}". Expected HH:mm`);
    }

    return { hours, minutes };
  }

  throw new Error(
    `Invalid time format: "${timeStr}". Expected formats: HH:mm or HH:mm - HH:mm`
  );
};

// Helper function ƒë·ªÉ t·∫°o DateTime t·ª´ date v√† time
const createDateTime = (dateString, timeString) => {
  console.log("Creating DateTime from:", { dateString, timeString });

  const baseDate = parseDate(dateString);
  const timeInfo = parseTime(timeString);

  const dateTime = new Date(baseDate);
  dateTime.setHours(timeInfo.hours, timeInfo.minutes, 0, 0);

  console.log("Created DateTime:", dateTime);
  return dateTime;
};

// Helper function ƒë·ªÉ ki·ªÉm tra technician c√≥ r·∫£nh kh√¥ng
const checkTechnicianAvailability = async (
  technicianId,
  scheduledTime,
  duration
) => {
  if (!technicianId) {
    return { available: true }; // N·∫øu kh√¥ng ch·ªçn technician th√¨ lu√¥n available
  }

  // T√≠nh th·ªùi gian k·∫øt th√∫c (duration + 30 ph√∫t di chuy·ªÉn)
  const serviceEndTime = new Date(
    scheduledTime.getTime() + (duration + 30) * 60 * 1000
  );

  // T√¨m t·∫•t c·∫£ booking c·ªßa technician trong ng√†y ƒë√≥
  const startOfDay = new Date(scheduledTime);
  startOfDay.setHours(0, 0, 0, 0);

  const endOfDay = new Date(scheduledTime);
  endOfDay.setHours(23, 59, 59, 999);

  const existingBookings = await RepairRequest.find({
    technician: technicianId,
    scheduledTime: {
      $gte: startOfDay,
      $lte: endOfDay,
    },
    status: { $in: ["pending", "accepted", "in_progress"] },
  }).populate("service", "duration");

  // Ki·ªÉm tra conflict v·ªõi t·ª´ng booking hi·ªán t·∫°i
  for (let booking of existingBookings) {
    const existingStart = new Date(booking.scheduledTime);
    const existingEnd = new Date(
      existingStart.getTime() + (booking.service.duration + 30) * 60 * 1000
    );

    // Ki·ªÉm tra overlap: booking m·ªõi b·∫Øt ƒë·∫ßu tr∆∞·ªõc khi booking c≈© k·∫øt th√∫c V√Ä
    // booking m·ªõi k·∫øt th√∫c sau khi booking c≈© b·∫Øt ƒë·∫ßu
    if (scheduledTime < existingEnd && serviceEndTime > existingStart) {
      return {
        available: false,
        conflictWith: {
          bookingId: booking._id,
          startTime: existingStart,
          endTime: existingEnd,
          serviceName: booking.service.name || "Unknown Service",
        },
      };
    }
  }

  return { available: true };
};

// Helper function ƒë·ªÉ t√¨m khung gi·ªù r·∫£nh
// Helper function ƒë·ªÉ x√°c ƒë·ªãnh district li·ªÅn k·ªÅ
const isAdjacentDistrict = (district1, district2) => {
  // Mapping c√°c district li·ªÅn k·ªÅ ·ªü TP.HCM
  const adjacentMap = {
    "qu·∫≠n 1": ["qu·∫≠n 3", "qu·∫≠n 4", "qu·∫≠n 5", "qu·∫≠n 10"],
    "qu·∫≠n 2": ["qu·∫≠n 9", "th·ªß ƒë·ª©c"],
    "qu·∫≠n 3": ["qu·∫≠n 1", "qu·∫≠n 10", "qu·∫≠n 11", "ph√∫ nhu·∫≠n"],
    "qu·∫≠n 4": ["qu·∫≠n 1", "qu·∫≠n 7", "qu·∫≠n 8"],
    "qu·∫≠n 5": ["qu·∫≠n 1", "qu·∫≠n 6", "qu·∫≠n 8", "qu·∫≠n 10", "qu·∫≠n 11"],
    "qu·∫≠n 6": ["qu·∫≠n 5", "qu·∫≠n 8", "qu·∫≠n 11", "b√¨nh t√¢n"],
    "qu·∫≠n 7": ["qu·∫≠n 4", "qu·∫≠n 8", "nh√† b√®"],
    "qu·∫≠n 8": ["qu·∫≠n 4", "qu·∫≠n 5", "qu·∫≠n 6", "qu·∫≠n 7", "b√¨nh ch√°nh"],
    "qu·∫≠n 9": ["qu·∫≠n 2", "th·ªß ƒë·ª©c"],
    "qu·∫≠n 10": ["qu·∫≠n 1", "qu·∫≠n 3", "qu·∫≠n 5", "qu·∫≠n 11", "ph√∫ nhu·∫≠n"],
    "qu·∫≠n 11": ["qu·∫≠n 3", "qu·∫≠n 5", "qu·∫≠n 6", "qu·∫≠n 10", "t√¢n b√¨nh"],
    "qu·∫≠n 12": ["g√≤ v·∫•p", "t√¢n b√¨nh", "b√¨nh th·∫°nh", "th·ªß ƒë·ª©c"],
    "b√¨nh th·∫°nh": ["qu·∫≠n 12", "ph√∫ nhu·∫≠n", "g√≤ v·∫•p", "th·ªß ƒë·ª©c"],
    "g√≤ v·∫•p": ["qu·∫≠n 12", "b√¨nh th·∫°nh", "t√¢n b√¨nh", "ph√∫ nhu·∫≠n"],
    "ph√∫ nhu·∫≠n": ["qu·∫≠n 3", "qu·∫≠n 10", "b√¨nh th·∫°nh", "g√≤ v·∫•p", "t√¢n b√¨nh"],
    "t√¢n b√¨nh": ["qu·∫≠n 11", "qu·∫≠n 12", "g√≤ v·∫•p", "ph√∫ nhu·∫≠n", "t√¢n ph√∫"],
    "t√¢n ph√∫": ["t√¢n b√¨nh", "b√¨nh t√¢n"],
    "b√¨nh t√¢n": ["qu·∫≠n 6", "t√¢n ph√∫", "b√¨nh ch√°nh"],
    "b√¨nh ch√°nh": ["qu·∫≠n 8", "b√¨nh t√¢n", "nh√† b√®"],
    "nh√† b√®": ["qu·∫≠n 7", "b√¨nh ch√°nh"],
    "th·ªß ƒë·ª©c": ["qu·∫≠n 2", "qu·∫≠n 9", "qu·∫≠n 12", "b√¨nh th·∫°nh"],
  };

  // Normalize district names
  const dist1 = district1.toLowerCase().trim();
  const dist2 = district2.toLowerCase().trim();

  // Check if districts are adjacent
  const isAdjacent = adjacentMap[dist1]?.includes(dist2) || false;

  if (isAdjacent) {
    console.log(`üåÜ Adjacent districts detected: ${dist1} <-> ${dist2}`);
  }

  return isAdjacent;
};

const findAvailableTimeSlots = async (
  requestedDateTime,
  serviceDuration,
  technicians
) => {
  const suggestions = [];
  const currentDate = new Date(requestedDateTime);

  // T√¨m khung gi·ªù trong 3 ng√†y ti·∫øp theo
  for (let dayOffset = 0; dayOffset < 3; dayOffset++) {
    const checkDate = new Date(currentDate);
    checkDate.setDate(checkDate.getDate() + dayOffset);

    // X√°c ƒë·ªãnh gi·ªù l√†m vi·ªác d·ª±a tr√™n ng√†y
    const isSunday = checkDate.getDay() === 0;
    const startHour = isSunday ? 8 : 7;
    const endHour = isSunday ? 17 : 21;

    // Ki·ªÉm tra c√°c khung gi·ªù trong ng√†y
    for (let hour = startHour; hour < endHour; hour++) {
      const timeSlot = new Date(checkDate);
      timeSlot.setHours(hour, 0, 0, 0);

      // Ki·ªÉm tra xem c√≥ technician n√†o r·∫£nh trong khung gi·ªù n√†y kh√¥ng
      for (const tech of technicians) {
        const availabilityCheck = await checkTechnicianAvailability(
          tech._id,
          timeSlot,
          serviceDuration
        );

        if (availabilityCheck.available) {
          suggestions.push({
            date: timeSlot.toLocaleDateString("vi-VN"),
            time: `${hour.toString().padStart(2, "0")}:00`,
            datetime: timeSlot,
            availableTechnician: {
              id: tech._id,
              name: tech.name || "K·ªπ thu·∫≠t vi√™n",
            },
          });
          break; // T√¨m ƒë∆∞·ª£c 1 technician r·∫£nh l√† ƒë·ªß cho slot n√†y
        }
      }

      // T·ªëi ƒëa 5 suggestions
      if (suggestions.length >= 5) break;
    }

    if (suggestions.length >= 5) break;
  }

  return suggestions;
};

// Helper function ƒë·ªÉ t√≠nh ƒëi·ªÉm ph√¢n b·ªï technician
// Tr·ªçng s·ªë m·ªõi: Location(20%) + Workload(35%) + Rating(20%) + Experience(15%) + Fairness(7%) + Specialization(3%) = 100%
const calculateAssignmentScore = async (
  technician,
  scheduledDateTime,
  serviceId,
  customerDistrict = null
) => {
  let totalScore = 0;
  const breakdown = {};

  try {
    // 1. üó∫Ô∏è Location Score (20% tr·ªçng s·ªë) - ∆Øu ti√™n k·ªπ thu·∫≠t vi√™n c√πng khu v·ª±c
    let locationScore = 5; // M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ th√¥ng tin district

    if (customerDistrict && technician.district) {
      const customerDist = customerDistrict.toLowerCase().trim();
      const techDist = technician.district.toLowerCase().trim();

      if (customerDist === techDist) {
        locationScore = 20; // C√πng district: ƒëi·ªÉm t·ªëi ƒëa
      } else if (isAdjacentDistrict(customerDist, techDist)) {
        locationScore = 15; // District li·ªÅn k·ªÅ: ƒëi·ªÉm cao
      } else {
        locationScore = 10; // District kh√°c: ƒëi·ªÉm trung b√¨nh
      }
    }

    breakdown.location = {
      customerDistrict: customerDistrict,
      technicianDistrict: technician.district,
      score: locationScore,
    };
    totalScore += locationScore;

    console.log(
      `üó∫Ô∏è Location scoring: Customer(${customerDistrict}) vs Technician(${technician.district}) = ${locationScore} points`
    );

    // 2. üìä Workload Score (35% tr·ªçng s·ªë) - C√†ng √≠t booking hi·ªán t·∫°i c√†ng cao ƒëi·ªÉm
    const currentDate = new Date();
    const currentWorkload = await RepairRequest.countDocuments({
      technician: technician._id,
      status: { $in: ["pending", "accepted", "in_progress"] },
      scheduledTime: { $gte: currentDate },
    });

    // ƒêi·ªÉm workload: t·ªëi ƒëa 35 ƒëi·ªÉm, gi·∫£m 7 ƒëi·ªÉm cho m·ªói booking
    const workloadScore = Math.max(0, 35 - currentWorkload * 7);
    breakdown.workload = { current: currentWorkload, score: workloadScore };
    totalScore += workloadScore;

    // 3. ‚≠ê Rating Score (20% tr·ªçng s·ªë) - ƒê√°nh gi√° trung b√¨nh t·ª´ kh√°ch h√†ng
    const ratingsData = await RepairRequest.aggregate([
      {
        $match: {
          technician: technician._id,
          "feedback.rating": { $exists: true, $ne: null },
        },
      },
      {
        $group: {
          _id: null,
          avgRating: { $avg: "$feedback.rating" },
          totalRatings: { $sum: 1 },
        },
      },
    ]);

    let ratingScore = 12; // Default score n·∫øu ch∆∞a c√≥ ƒë√°nh gi√°
    if (ratingsData.length > 0) {
      const avgRating = ratingsData[0].avgRating;
      const totalRatings = ratingsData[0].totalRatings;
      // ƒêi·ªÉm rating: avgRating * 4, bonus n·∫øu c√≥ nhi·ªÅu ƒë√°nh gi√°
      ratingScore = Math.min(
        20,
        avgRating * 4 + Math.min(4, totalRatings * 0.4)
      );
    }

    breakdown.rating = {
      average: ratingsData[0]?.avgRating || 0,
      count: ratingsData[0]?.totalRatings || 0,
      score: ratingScore,
    };
    totalScore += ratingScore;

    // 4. üíº Experience Score (15% tr·ªçng s·ªë) - S·ªë booking ƒë√£ ho√†n th√†nh
    const completedBookings = await RepairRequest.countDocuments({
      technician: technician._id,
      status: "completed",
    });

    // ƒêi·ªÉm kinh nghi·ªám: t·ªëi ƒëa 15 ƒëi·ªÉm
    const experienceScore = Math.min(15, completedBookings * 0.4);
    breakdown.experience = {
      completed: completedBookings,
      score: experienceScore,
    };
    totalScore += experienceScore;

    // 5. ‚è∞ Fairness Score (7% tr·ªçng s·ªë) - L·∫ßn cu·ªëi ƒë∆∞·ª£c ph√¢n c√¥ng
    const lastAssignment = await RepairRequest.findOne({
      technician: technician._id,
      status: { $in: ["accepted", "completed", "in_progress"] },
    }).sort({ createdAt: -1 });

    let fairnessScore = 7; // M·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ booking n√†o
    if (lastAssignment) {
      const daysSinceLastAssignment =
        (currentDate - new Date(lastAssignment.createdAt)) /
        (1000 * 60 * 60 * 24);
      // ƒêi·ªÉm c√¥ng b·∫±ng: c√†ng l√¢u kh√¥ng ƒë∆∞·ª£c ph√¢n c√¥ng c√†ng cao ƒëi·ªÉm
      fairnessScore = Math.min(7, daysSinceLastAssignment * 0.7);
    }

    breakdown.fairness = {
      lastAssignment: lastAssignment?.createdAt,
      daysSince: lastAssignment
        ? Math.floor(
            (currentDate - new Date(lastAssignment.createdAt)) /
              (1000 * 60 * 60 * 24)
          )
        : null,
      score: fairnessScore,
    };
    totalScore += fairnessScore;

    // 6. üéØ Specialization Score (3% tr·ªçng s·ªë) - Chuy√™n m√¥n v·ªõi service
    let specializationScore = 2; // M·∫∑c ƒë·ªãnh
    if (technician.services && technician.services.length > 0) {
      // N·∫øu c√≥ specialization trong service n√†y
      if (technician.services.some((s) => s.toString() === serviceId)) {
        specializationScore = 3;
      }
    }

    breakdown.specialization = { score: specializationScore };
    totalScore += specializationScore;

    console.log(`üìä Score calculation for ${technician._id}:`, breakdown);

    return {
      total: Math.round(totalScore * 10) / 10, // L√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n
      breakdown: breakdown,
    };
  } catch (error) {
    console.error("Error calculating assignment score:", error);
    // Tr·∫£ v·ªÅ ƒëi·ªÉm m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
    return {
      total: 50,
      breakdown: { error: "Could not calculate score", default: 50 },
    };
  }
};

// Helper function ƒë·ªÉ ph√¢n c√¥ng l·∫°i k·ªπ thu·∫≠t vi√™n
const reassignTechnician = async (booking) => {
  try {
    console.log(`üîÑ Reassigning technician for booking ${booking._id}`);

    // L·∫•y th√¥ng tin ƒë·ªãa ch·ªâ ƒë·ªÉ t√¨m district
    const addressParts = booking.address.split(",");
    const district =
      addressParts.length > 1
        ? addressParts[addressParts.length - 1].trim()
        : null;

    // T√¨m t·∫•t c·∫£ k·ªπ thu·∫≠t vi√™n ƒë·ªß ƒëi·ªÅu ki·ªán (tr·ª´ ng∆∞·ªùi ƒë√£ t·ª´ ch·ªëi)
    const availableTechnicians = await Technician.find({
      status: "active",
      depositStatus: "paid",
      _id: { $ne: booking.technician._id }, // Exclude current technician
      $or: [
        { services: { $in: [booking.service._id] } },
        { services: { $size: 0 } },
        { services: { $exists: false } },
      ],
    });

    console.log(
      `üìã Found ${availableTechnicians.length} potential technicians for reassignment`
    );

    if (availableTechnicians.length === 0) {
      // Kh√¥ng c√≥ k·ªπ thu·∫≠t vi√™n kh√°c, ƒë·∫∑t l·∫°i tr·∫°ng th√°i pending
      booking.status = "pending";
      booking.technician = null;
      booking.confirmationTimeout = null;
      booking.confirmationAssignedAt = null;
      booking.timeline.push({
        status: "pending",
        description:
          "Kh√¥ng t√¨m th·∫•y k·ªπ thu·∫≠t vi√™n kh√°c, ƒë∆°n h√†ng ch·ªù ph√¢n c√¥ng l·∫°i",
        createdAt: new Date(),
      });
      await booking.save();
      return { success: false, booking };
    }

    // T√≠nh ƒëi·ªÉm cho c√°c k·ªπ thu·∫≠t vi√™n c√≥ th·ªÉ
    const availableTechsWithScore = [];
    for (const tech of availableTechnicians) {
      const availabilityCheck = await checkTechnicianAvailability(
        tech._id,
        booking.scheduledTime,
        booking.service.duration
      );

      if (availabilityCheck.available) {
        const score = await calculateAssignmentScore(
          tech,
          booking.scheduledTime,
          booking.service._id,
          district
        );
        availableTechsWithScore.push({
          technician: tech,
          score: score,
          details: score.breakdown,
        });
      }
    }

    if (availableTechsWithScore.length === 0) {
      // Kh√¥ng c√≥ k·ªπ thu·∫≠t vi√™n r·∫£nh, ƒë·∫∑t l·∫°i tr·∫°ng th√°i pending
      booking.status = "pending";
      booking.technician = null;
      booking.confirmationTimeout = null;
      booking.confirmationAssignedAt = null;
      booking.timeline.push({
        status: "pending",
        description: "Kh√¥ng c√≥ k·ªπ thu·∫≠t vi√™n r·∫£nh, ƒë∆°n h√†ng ch·ªù ph√¢n c√¥ng l·∫°i",
        createdAt: new Date(),
      });
      await booking.save();
      return { success: false, booking };
    }

    // S·∫Øp x·∫øp v√† ch·ªçn k·ªπ thu·∫≠t vi√™n t·ªët nh·∫•t
    availableTechsWithScore.sort((a, b) => b.score.total - a.score.total);
    const bestTechnician = availableTechsWithScore[0];

    // C·∫≠p nh·∫≠t booking v·ªõi k·ªπ thu·∫≠t vi√™n m·ªõi
    booking.technician = bestTechnician.technician._id;
    booking.status = "pending_confirmation";
    booking.confirmationTimeout = new Date(Date.now() + 2 * 60 * 1000); // 2 ph√∫t m·ªõi
    booking.confirmationAssignedAt = new Date();
    booking.timeline.push({
      status: "pending_confirmation",
      description: `ƒê√£ ph√¢n c√¥ng cho k·ªπ thu·∫≠t vi√™n kh√°c. Vui l√≤ng x√°c nh·∫≠n trong 2 ph√∫t.`,
      createdAt: new Date(),
    });

    await booking.save();

    // Populate l·∫°i th√¥ng tin technician
    await booking.populate({
      path: "technician",
      populate: {
        path: "account",
        select: "fullName phone",
      },
    });

    console.log(
      `‚úÖ Reassigned to technician ${bestTechnician.technician._id} with score ${bestTechnician.score.total}`
    );

    return { success: true, booking };
  } catch (error) {
    console.error("Error in reassignTechnician:", error);
    return { success: false, booking, error: error.message };
  }
};

// Helper function to extract district from address
const extractDistrict = (address) => {
  if (!address) return null;

  const districts = [
    "Qu·∫≠n 1",
    "Qu·∫≠n 2",
    "Qu·∫≠n 3",
    "Qu·∫≠n 4",
    "Qu·∫≠n 5",
    "Qu·∫≠n 6",
    "Qu·∫≠n 7",
    "Qu·∫≠n 8",
    "Qu·∫≠n 9",
    "Qu·∫≠n 10",
    "Qu·∫≠n 11",
    "Qu·∫≠n 12",
    "Qu·∫≠n B√¨nh Th·∫°nh",
    "Qu·∫≠n G√≤ V·∫•p",
    "Qu·∫≠n T√¢n B√¨nh",
    "Qu·∫≠n T√¢n Ph√∫",
    "Qu·∫≠n Ph√∫ Nhu·∫≠n",
    "Qu·∫≠n B√¨nh T√¢n",
    "Huy·ªán B√¨nh Ch√°nh",
    "Huy·ªán H√≥c M√¥n",
    "Huy·ªán C·ªß Chi",
    "Huy·ªán Nh√† B√®",
    "Huy·ªán C·∫ßn Gi·ªù",
    "Th√†nh ph·ªë Th·ªß ƒê·ª©c",
  ];

  for (const district of districts) {
    if (address.includes(district)) {
      return district;
    }
  }

  return null;
};

// Helper function to format date and time for display
const formatDateTimeForDisplay = (dateTime) => {
  return new Date(dateTime).toLocaleDateString("vi-VN", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
  });
};

const BookingController = {
  // Public API ƒë·ªÉ l·∫•y danh s√°ch services
  getPublicServices: async (req, res) => {
    try {
      const services = await Service.find({ isActive: true })
        .select("name description category basePrice duration images")
        .sort({ category: 1, name: 1 });

      return res.status(200).json({
        success: true,
        message: "L·∫•y danh s√°ch d·ªãch v·ª• th√†nh c√¥ng",
        data: services,
      });
    } catch (error) {
      console.error("Error getting public services:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y danh s√°ch d·ªãch v·ª•",
        error: error.message,
      });
    }
  },

  createBooking: async (req, res) => {
    try {
      const {
        service,
        technician,
        date,
        time,
        notes,
        name,
        phone,
        address,
        district,
      } = req.body;
      console.log("Received booking request:", req.body);

      // Decode token ƒë·ªÉ l·∫•y user_id
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      // Validate c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
      if (!service || !date || !time || !name || !phone || !address) {
        return res.status(400).json({
          success: false,
          message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc",
          missing: {
            service: !service,
            date: !date,
            time: !time,
            name: !name,
            phone: !phone,
            address: !address,
          },
        });
      }

      // Validate phone number format
      const phoneRegex = /(84|0[3|5|7|8|9])+([0-9]{8})\b/;
      if (!phoneRegex.test(phone)) {
        return res.status(400).json({
          success: false,
          message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá",
          details:
            "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ ƒë·ªãnh d·∫°ng: 03xxxxxxxx, 05xxxxxxxx, 07xxxxxxxx, 08xxxxxxxx, 09xxxxxxxx",
        });
      }

      // Validate name length
      if (name.length < 2 || name.length > 50) {
        return res.status(400).json({
          success: false,
          message: "T√™n ng∆∞·ªùi ƒë·∫∑t ph·∫£i c√≥ t·ª´ 2-50 k√Ω t·ª±",
        });
      }

      // Validate address length
      if (address.length < 5 || address.length > 200) {
        return res.status(400).json({
          success: false,
          message: "ƒê·ªãa ch·ªâ ph·∫£i c√≥ t·ª´ 5-200 k√Ω t·ª±",
        });
      }

      // T·∫°o scheduledTime t·ª´ date v√† time v·ªõi x·ª≠ l√Ω format ƒë√∫ng
      let scheduledDateTime;
      try {
        scheduledDateTime = createDateTime(date, time);
        console.log(
          "Successfully created scheduledDateTime:",
          scheduledDateTime
        );
      } catch (error) {
        console.error("Error parsing date/time:", error);
        return res.status(400).json({
          success: false,
          message: "Format ng√†y gi·ªù kh√¥ng h·ª£p l·ªá",
          details: `Ng√†y nh·∫≠n ƒë∆∞·ª£c: "${date}", Gi·ªù nh·∫≠n ƒë∆∞·ª£c: "${time}"`,
          expectedFormats:
            "Ng√†y: dd/mm/yyyy ho·∫∑c yyyy-mm-dd, Gi·ªù: HH:mm ho·∫∑c HH:mm - HH:mm",
          error: error.message,
        });
      }

      // Ki·ªÉm tra th·ªùi gian ƒë·∫∑t l·ªãch ph·∫£i trong t∆∞∆°ng lai (t·ªëi thi·ªÉu 30 ph√∫t)
      const now = new Date();
      const thirtyMinutesLater = new Date(now.getTime() + 30 * 60 * 1000);

      if (scheduledDateTime <= thirtyMinutesLater) {
        return res.status(400).json({
          success: false,
          message: "Th·ªùi gian ƒë·∫∑t l·ªãch ph·∫£i c√°ch √≠t nh·∫•t 30 ph√∫t t·ª´ hi·ªán t·∫°i",
          details: `Th·ªùi gian hi·ªán t·∫°i: ${now.toLocaleString("vi-VN")}`,
        });
      }

      // Ki·ªÉm tra th·ªùi gian l√†m vi·ªác (7:00 - 21:00)
      const workingHours = scheduledDateTime.getHours();
      if (workingHours < 7 || workingHours >= 21) {
        return res.status(400).json({
          success: false,
          message: "Th·ªùi gian ƒë·∫∑t l·ªãch ph·∫£i trong gi·ªù l√†m vi·ªác",
          details: "Gi·ªù l√†m vi·ªác: 7:00 - 21:00 h√†ng ng√†y",
        });
      }

      // Ch·ªß nh·∫≠t c√≥ th·ªÉ ƒë·∫∑t l·ªãch nh∆∞ng ch·ªâ trong gi·ªù h√†nh ch√≠nh (8:00 - 17:00)
      const dayOfWeek = scheduledDateTime.getDay();
      if (dayOfWeek === 0) {
        if (workingHours < 8 || workingHours >= 17) {
          return res.status(400).json({
            success: false,
            message: "Ng√†y Ch·ªß nh·∫≠t ch·ªâ nh·∫≠n l·ªãch trong gi·ªù h√†nh ch√≠nh",
            details: "Gi·ªù l√†m vi·ªác Ch·ªß nh·∫≠t: 8:00 - 17:00",
          });
        }
      }

      // Validate notes length (n·∫øu c√≥)
      if (notes && notes.length > 500) {
        return res.status(400).json({
          success: false,
          message: "Ghi ch√∫ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±",
        });
      }

      // L·∫•y th√¥ng tin service ƒë·ªÉ bi·∫øt duration
      const serviceInfo = await Service.findById(service);
      if (!serviceInfo) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•",
        });
      }

      // Ki·ªÉm tra xem service c√≥ active kh√¥ng
      if (!serviceInfo.isActive) {
        return res.status(400).json({
          success: false,
          message: "D·ªãch v·ª• n√†y hi·ªán kh√¥ng kh·∫£ d·ª•ng",
        });
      }

      // Ki·ªÉm tra gi√° d·ªãch v·ª• h·ª£p l·ªá
      if (!serviceInfo.basePrice || serviceInfo.basePrice <= 0) {
        return res.status(400).json({
          success: false,
          message: "D·ªãch v·ª• ch∆∞a c√≥ gi√° ho·∫∑c gi√° kh√¥ng h·ª£p l·ªá",
        });
      }

      // Ki·ªÉm tra user kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t qu√° nhi·ªÅu l·∫ßn trong ng√†y
      const startOfDay = new Date(scheduledDateTime);
      startOfDay.setHours(0, 0, 0, 0);
      const endOfDay = new Date(scheduledDateTime);
      endOfDay.setHours(23, 59, 59, 999);

      const todayBookings = await RepairRequest.countDocuments({
        customer: decodedToken.id || decodedToken._id,
        scheduledTime: { $gte: startOfDay, $lte: endOfDay },
        status: { $in: ["pending", "accepted", "in_progress"] },
      });

      if (todayBookings >= 5) {
        return res.status(400).json({
          success: false,
          message: "B·∫°n ƒë√£ ƒë·∫∑t qu√° nhi·ªÅu l·ªãch trong ng√†y",
          details: "M·ªói ng√†y ch·ªâ ƒë∆∞·ª£c ƒë·∫∑t t·ªëi ƒëa 5 l·ªãch h·∫πn",
        });
      }

      // Auto-assign technician logic
      let assignedTechnician = null;
      let candidateCount = 0;

      if (technician) {
        // N·∫øu c√≥ ch·ªçn technician c·ª• th·ªÉ, validate
        const technicianExists = await Technician.findById(technician);
        if (!technicianExists) {
          return res.status(404).json({
            success: false,
            message: "Kh√¥ng t√¨m th·∫•y k·ªπ thu·∫≠t vi√™n",
          });
        }

        // Ki·ªÉm tra tr·∫°ng th√°i k·ªπ thu·∫≠t vi√™n
        if (technicianExists.status !== "active") {
          return res.status(400).json({
            success: false,
            message: "K·ªπ thu·∫≠t vi√™n n√†y hi·ªán kh√¥ng ho·∫°t ƒë·ªông",
          });
        }

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªçc
        if (technicianExists.depositStatus !== "paid") {
          return res.status(400).json({
            success: false,
            message: "K·ªπ thu·∫≠t vi√™n n√†y ch∆∞a ƒë√≥ng ƒë·ªß c·ªçc ƒë·ªÉ nh·∫≠n ƒë∆°n h√†ng",
          });
        }

        if (technicianExists.services && technicianExists.services.length > 0) {
          const canDoService = technicianExists.services.includes(service);
          if (!canDoService) {
            return res.status(400).json({
              success: false,
              message: "K·ªπ thu·∫≠t vi√™n n√†y kh√¥ng th·ªÉ th·ª±c hi·ªán d·ªãch v·ª• ƒë√£ ch·ªçn",
            });
          }
        }

        const availabilityCheck = await checkTechnicianAvailability(
          technician,
          scheduledDateTime,
          serviceInfo.duration
        );

        if (!availabilityCheck.available) {
          return res.status(409).json({
            success: false,
            message: "K·ªπ thu·∫≠t vi√™n ƒë√£ c√≥ l·ªãch h·∫πn trong th·ªùi gian n√†y",
            conflict: {
              message: `Xung ƒë·ªôt v·ªõi booking t·ª´ ${availabilityCheck.conflictWith.startTime.toLocaleTimeString(
                "vi-VN"
              )} ƒë·∫øn ${availabilityCheck.conflictWith.endTime.toLocaleTimeString(
                "vi-VN"
              )}`,
              conflictBooking: availabilityCheck.conflictWith,
            },
            suggestions:
              "Vui l√≤ng ch·ªçn th·ªùi gian kh√°c ho·∫∑c ƒë·ªÉ h·ªá th·ªëng t·ª± ƒë·ªông ph√¢n c√¥ng k·ªπ thu·∫≠t vi√™n",
          });
        }

        assignedTechnician = technician;
      } else {
        // T·ª± ƒë·ªông t√¨m k·ªπ thu·∫≠t vi√™n r·∫£nh
        console.log("üîç Auto-assigning technician...");

        // T√¨m t·∫•t c·∫£ k·ªπ thu·∫≠t vi√™n ƒë·ªß ƒëi·ªÅu ki·ªán l√†m service n√†y
        const availableTechnicians = await Technician.find({
          status: "active", // Ph·∫£i ƒëang ho·∫°t ƒë·ªông
          depositStatus: "paid", // Ph·∫£i ƒë√£ ƒë√≥ng c·ªçc
          $or: [
            { services: { $in: [service] } }, // C√≥ service n√†y trong danh s√°ch
            { services: { $size: 0 } }, // Ho·∫∑c kh√¥ng gi·ªõi h·∫°n service (array r·ªóng)
            { services: { $exists: false } }, // Ho·∫∑c ch∆∞a set services
          ],
        });

        console.log(
          `üìã Found ${availableTechnicians.length} potential technicians`
        );

        // T√¨m t·∫•t c·∫£ technician r·∫£nh v√† t√≠nh ƒëi·ªÉm
        const availableTechsWithScore = [];

        for (const tech of availableTechnicians) {
          const availabilityCheck = await checkTechnicianAvailability(
            tech._id,
            scheduledDateTime,
            serviceInfo.duration
          );

          if (availabilityCheck.available) {
            // T√≠nh ƒëi·ªÉm ph√¢n b·ªï cho technician n√†y
            const score = await calculateAssignmentScore(
              tech,
              scheduledDateTime,
              service,
              district
            );
            availableTechsWithScore.push({
              technician: tech,
              score: score,
              details: score.breakdown,
            });

            console.log(
              `‚úÖ Available technician: ${tech._id}, Score: ${score.total}`
            );
          }
        }

        // Ch·ªçn technician c√≥ ƒëi·ªÉm cao nh·∫•t v·ªõi tie-breaker logic
        if (availableTechsWithScore.length > 0) {
          // S·∫Øp x·∫øp v·ªõi multiple criteria ƒë·ªÉ handle ties
          availableTechsWithScore.sort((a, b) => {
            // 1. So s√°nh ƒëi·ªÉm t·ªïng
            if (b.score.total !== a.score.total) {
              return b.score.total - a.score.total;
            }

            // 2. TIE-BREAKER 1: Location (∆∞u ti√™n ng∆∞·ªùi c√πng khu v·ª±c)
            if (
              b.score.breakdown.location.score !==
              a.score.breakdown.location.score
            ) {
              console.log(
                `üîÄ Tie-breaker 1: Location score ${b.score.breakdown.location.score} vs ${a.score.breakdown.location.score}`
              );
              return (
                b.score.breakdown.location.score -
                a.score.breakdown.location.score
              );
            }

            // 3. TIE-BREAKER 2: Fairness (∆∞u ti√™n ng∆∞·ªùi l√¢u ch∆∞a l√†m vi·ªác)
            if (
              b.score.breakdown.fairness.score !==
              a.score.breakdown.fairness.score
            ) {
              console.log(
                `üîÄ Tie-breaker 2: Fairness score ${b.score.breakdown.fairness.score} vs ${a.score.breakdown.fairness.score}`
              );
              return (
                b.score.breakdown.fairness.score -
                a.score.breakdown.fairness.score
              );
            }

            // 4. TIE-BREAKER 3: Workload (∆∞u ti√™n ng∆∞·ªùi √≠t vi·ªác h∆°n)
            if (
              b.score.breakdown.workload.score !==
              a.score.breakdown.workload.score
            ) {
              console.log(
                `üîÄ Tie-breaker 3: Workload score ${b.score.breakdown.workload.score} vs ${a.score.breakdown.workload.score}`
              );
              return (
                b.score.breakdown.workload.score -
                a.score.breakdown.workload.score
              );
            }

            // 5. TIE-BREAKER 4: Rating (∆∞u ti√™n ng∆∞·ªùi c√≥ rating cao h∆°n)
            if (
              b.score.breakdown.rating.score !== a.score.breakdown.rating.score
            ) {
              console.log(
                `üîÄ Tie-breaker 4: Rating score ${b.score.breakdown.rating.score} vs ${a.score.breakdown.rating.score}`
              );
              return (
                b.score.breakdown.rating.score - a.score.breakdown.rating.score
              );
            }

            // 6. TIE-BREAKER 5: Specialization (∆∞u ti√™n ng∆∞·ªùi c√≥ chuy√™n m√¥n)
            if (
              b.score.breakdown.specialization.score !==
              a.score.breakdown.specialization.score
            ) {
              console.log(
                `üîÄ Tie-breaker 5: Specialization ${b.score.breakdown.specialization.score} vs ${a.score.breakdown.specialization.score}`
              );
              return (
                b.score.breakdown.specialization.score -
                a.score.breakdown.specialization.score
              );
            }

            // 7. TIE-BREAKER 6: Random selection (fair random)
            console.log(
              `üé≤ Final tie-breaker: Random selection between equal candidates`
            );
            return Math.random() - 0.5;
          });

          const bestTechnician = availableTechsWithScore[0];
          assignedTechnician = bestTechnician.technician._id;

          // Check n·∫øu c√≥ tie v√† log th√¥ng tin
          const tiedCandidates = availableTechsWithScore.filter(
            (t) => t.score.total === bestTechnician.score.total
          );
          if (tiedCandidates.length > 1) {
            console.log(
              `‚öñÔ∏è Had ${tiedCandidates.length} tied candidates with score ${bestTechnician.score.total}`
            );
            console.log(
              `üèÜ Selected after tie-breaking: ${assignedTechnician}`
            );
            console.log(`üîÄ Tie-breaker details:`, {
              selectedCandidate: bestTechnician.details,
              allTiedCandidates: tiedCandidates.map((t) => ({
                id: t.technician._id,
                score: t.score.total,
                location: t.score.breakdown.location.score,
                fairness: t.score.breakdown.fairness.score,
                workload: t.score.breakdown.workload.score,
                rating: t.score.breakdown.rating.score,
              })),
            });
          } else {
            console.log(
              `üèÜ Clear winner: ${assignedTechnician} with score ${bestTechnician.score.total}`
            );
          }

          console.log(`üìä Final assignment details:`, bestTechnician.details);
          candidateCount = availableTechsWithScore.length;
        }

        // N·∫øu kh√¥ng c√≥ k·ªπ thu·∫≠t vi√™n n√†o r·∫£nh, suggest khung gi·ªù kh√°c
        if (!assignedTechnician) {
          console.log("‚ùå No available technicians, finding suggestions...");

          const suggestions = await findAvailableTimeSlots(
            scheduledDateTime,
            serviceInfo.duration,
            availableTechnicians
          );

          return res.status(409).json({
            success: false,
            message: "T·∫•t c·∫£ k·ªπ thu·∫≠t vi√™n ƒë·ªÅu b·∫≠n trong khung gi·ªù n√†y",
            details:
              "Hi·ªán t·∫°i kh√¥ng c√≥ k·ªπ thu·∫≠t vi√™n n√†o r·∫£nh ƒë·ªÉ th·ª±c hi·ªán d·ªãch v·ª•",
            suggestions: {
              message: "Vui l√≤ng ch·ªçn m·ªôt trong c√°c khung gi·ªù sau:",
              availableSlots: suggestions,
            },
          });
        }
      }

      // T·∫°o m√£ ƒë∆°n h√†ng
      const orderCode = await generateOrderCode();
      console.log("Generated order code:", orderCode);

      // T·∫°o ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
      const fullAddress = district ? `${address}, ${district}` : address;

      // T·∫°o RepairRequest m·ªõi
      const newRepairRequest = new RepairRequest({
        orderCode: orderCode,
        customer: decodedToken.id || decodedToken._id,
        service: service,
        technician: assignedTechnician,
        description: notes || "",
        address: fullAddress,
        scheduledTime: scheduledDateTime,
        status: assignedTechnician ? "pending_confirmation" : "pending",
        price: {
          amount: serviceInfo.basePrice,
          currency: "VND",
        },
        confirmationTimeout: assignedTechnician
          ? new Date(Date.now() + 2 * 60 * 1000)
          : null,
        confirmationAssignedAt: assignedTechnician ? new Date() : null,
        timeline: [
          {
            status: assignedTechnician ? "pending_confirmation" : "pending",
            description: assignedTechnician
              ? `ƒê∆°n h√†ng ${orderCode} ƒë√£ ƒë∆∞·ª£c t·∫°o v√† ph√¢n c√¥ng cho k·ªπ thu·∫≠t vi√™n. Vui l√≤ng x√°c nh·∫≠n trong 2 ph√∫t.`
              : `ƒê∆°n h√†ng ${orderCode} ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. ƒêang t√¨m k·ªπ thu·∫≠t vi√™n ph√π h·ª£p...`,
            createdAt: new Date(),
          },
        ],
      });

      // L∆∞u v√†o database
      const savedRequest = await newRepairRequest.save();

      // Populate th√¥ng tin chi ti·∫øt ƒë·ªÉ tr·∫£ v·ªÅ
      const populatedRequest = await RepairRequest.findById(savedRequest._id)
        .populate("customer", "fullName email phone")
        .populate("service", "name description basePrice duration category")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone avatar",
          },
        });

      return res.status(200).json({
        success: true,
        message: assignedTechnician
          ? "T·∫°o y√™u c·∫ßu s·ª≠a ch·ªØa th√†nh c√¥ng v√† ƒë√£ ph√¢n c√¥ng k·ªπ thu·∫≠t vi√™n"
          : "T·∫°o y√™u c·∫ßu s·ª≠a ch·ªØa th√†nh c√¥ng",
        data: populatedRequest,
        autoAssigned: assignedTechnician ? true : false,
        assignmentInfo:
          assignedTechnician && !technician
            ? {
                method: "auto",
                reason:
                  "H·ªá th·ªëng t·ª± ƒë·ªông ch·ªçn k·ªπ thu·∫≠t vi√™n ph√π h·ª£p nh·∫•t d·ª±a tr√™n t·∫£i c√¥ng vi·ªác, ƒë√°nh gi√° v√† kinh nghi·ªám",
                selectionProcess:
                  candidateCount > 1
                    ? "intelligent_scoring_with_tie_breaker"
                    : "single_candidate",
              }
            : undefined,
      });
    } catch (error) {
      console.error("Error creating booking:", error);

      // X·ª≠ l√Ω l·ªói duplicate orderCode
      if (error.code === 11000 && error.keyPattern?.orderCode) {
        return res.status(500).json({
          success: false,
          message: "L·ªói h·ªá th·ªëng khi t·∫°o m√£ ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.",
          details: "H·ªá th·ªëng ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t",
        });
      }

      // X·ª≠ l√Ω l·ªói validation c·ªßa MongoDB
      if (error.name === "ValidationError") {
        const validationErrors = Object.values(error.errors).map(
          (err) => err.message
        );
        return res.status(400).json({
          success: false,
          message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
          details: validationErrors.join(", "),
        });
      }

      // X·ª≠ l√Ω l·ªói ObjectId kh√¥ng h·ª£p l·ªá
      if (error.name === "CastError") {
        return res.status(400).json({
          success: false,
          message: "ID kh√¥ng h·ª£p l·ªá",
          details: "Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin d·ªãch v·ª• ho·∫∑c k·ªπ thu·∫≠t vi√™n",
        });
      }

      // X·ª≠ l√Ω l·ªói k·∫øt n·ªëi database
      if (
        error.name === "MongoNetworkError" ||
        error.name === "MongoTimeoutError"
      ) {
        return res.status(503).json({
          success: false,
          message: "L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu",
          details: "Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t",
        });
      }

      return res.status(500).json({
        success: false,
        message: "L·ªói server khi t·∫°o y√™u c·∫ßu s·ª≠a ch·ªØa",
        details: "ƒê√£ c√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau",
        error:
          process.env.NODE_ENV === "development" ? error.message : undefined,
      });
    }
  },

  // L·∫•y danh s√°ch booking c·ªßa user hi·ªán t·∫°i
  getUserBookings: async (req, res) => {
    try {
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      const { page = 1, limit = 10, status } = req.query;
      const skip = (page - 1) * limit;

      // T·∫°o filter query
      const filterQuery = { customer: decodedToken.id || decodedToken._id };
      if (status) {
        filterQuery.status = status;
      }

      const bookings = await RepairRequest.find(filterQuery)
        .populate("service", "name description basePrice duration category")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone avatar",
          },
        })
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(parseInt(limit));

      const total = await RepairRequest.countDocuments(filterQuery);

      return res.status(200).json({
        success: true,
        message: "L·∫•y danh s√°ch booking th√†nh c√¥ng",
        data: {
          bookings,
          pagination: {
            currentPage: parseInt(page),
            totalPages: Math.ceil(total / limit),
            totalItems: total,
            itemsPerPage: parseInt(limit),
          },
        },
      });
    } catch (error) {
      console.error("Error getting user bookings:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y danh s√°ch booking",
        error: error.message,
      });
    }
  },

  // L·∫•y chi ti·∫øt m·ªôt booking
  getBookingDetails: async (req, res) => {
    try {
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      const { bookingId } = req.params;

      const booking = await RepairRequest.findOne({
        _id: bookingId,
        customer: decodedToken.id || decodedToken._id,
      })
        .populate("customer", "fullName email phone address")
        .populate("service", "name description basePrice duration category")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone avatar",
          },
        });

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y booking ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
        });
      }

      return res.status(200).json({
        success: true,
        message: "L·∫•y chi ti·∫øt booking th√†nh c√¥ng",
        data: booking,
      });
    } catch (error) {
      console.error("Error getting booking details:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y chi ti·∫øt booking",
        error: error.message,
      });
    }
  },

  // H·ªßy booking
  cancelBooking: async (req, res) => {
    try {
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      const { bookingId } = req.params;
      const { reason } = req.body;

      const booking = await RepairRequest.findOne({
        _id: bookingId,
        customer: decodedToken.id || decodedToken._id,
      });

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y booking ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
        });
      }

      // Ki·ªÉm tra tr·∫°ng th√°i c√≥ th·ªÉ h·ªßy kh√¥ng
      if (!["pending", "accepted"].includes(booking.status)) {
        return res.status(400).json({
          success: false,
          message: "Kh√¥ng th·ªÉ h·ªßy booking ·ªü tr·∫°ng th√°i hi·ªán t·∫°i",
        });
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† th√¥ng tin h·ªßy
      booking.status = "cancelled";
      booking.cancellation = {
        reason: reason || "Kh√°ch h√†ng h·ªßy",
        cancelledAt: new Date(),
      };
      booking.timeline.push({
        status: "cancelled",
        description: `Booking ƒë√£ ƒë∆∞·ª£c h·ªßy. L√Ω do: ${
          reason || "Kh√°ch h√†ng h·ªßy"
        }`,
        createdAt: new Date(),
      });

      await booking.save();

      return res.status(200).json({
        success: true,
        message: "H·ªßy booking th√†nh c√¥ng",
        data: booking,
      });
    } catch (error) {
      console.error("Error cancelling booking:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi h·ªßy booking",
        error: error.message,
      });
    }
  },

  // API ƒë·ªÉ ki·ªÉm tra th·ªùi gian r·∫£nh c·ªßa technician
  checkTechnicianAvailability: async (req, res) => {
    try {
      const { technicianId, date, time, serviceId } = req.query;

      if (!technicianId || !date || !time || !serviceId) {
        return res.status(400).json({
          success: false,
          message:
            "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin: technicianId, date, time, serviceId",
        });
      }

      // L·∫•y th√¥ng tin service
      const serviceInfo = await Service.findById(serviceId);
      if (!serviceInfo) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•",
        });
      }

      // T·∫°o scheduledTime v·ªõi x·ª≠ l√Ω format ƒë√∫ng
      let scheduledDateTime;
      try {
        scheduledDateTime = createDateTime(date, time);
      } catch (error) {
        return res.status(400).json({
          success: false,
          message: "Format ng√†y gi·ªù kh√¥ng h·ª£p l·ªá",
          details: `Ng√†y nh·∫≠n ƒë∆∞·ª£c: "${date}", Gi·ªù nh·∫≠n ƒë∆∞·ª£c: "${time}"`,
          expectedFormats:
            "Ng√†y: dd/mm/yyyy ho·∫∑c yyyy-mm-dd, Gi·ªù: HH:mm ho·∫∑c HH:mm - HH:mm",
          error: error.message,
        });
      }

      const availabilityCheck = await checkTechnicianAvailability(
        technicianId,
        scheduledDateTime,
        serviceInfo.duration
      );

      return res.status(200).json({
        success: true,
        message: availabilityCheck.available
          ? "K·ªπ thu·∫≠t vi√™n c√≥ th·ªÉ nh·∫≠n l·ªãch n√†y"
          : "K·ªπ thu·∫≠t vi√™n ƒë√£ c√≥ l·ªãch h·∫πn trong th·ªùi gian n√†y",
        data: availabilityCheck,
      });
    } catch (error) {
      console.error("Error checking technician availability:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi ki·ªÉm tra l·ªãch tr√¨nh",
        error: error.message,
      });
    }
  },

  // API ƒë·ªÉ tra c·ª©u booking theo m√£ ƒë∆°n h√†ng
  searchByOrderCode: async (req, res) => {
    try {
      const { orderCode } = req.params;

      if (!orderCode) {
        return res.status(400).json({
          success: false,
          message: "Vui l√≤ng cung c·∫•p m√£ ƒë∆°n h√†ng",
        });
      }

      const booking = await RepairRequest.findOne({
        orderCode: orderCode.toUpperCase(),
      })
        .populate("customer", "fullName email phone address")
        .populate("service", "name description basePrice duration category")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone avatar",
          },
        });

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£ n√†y",
        });
      }

      return res.status(200).json({
        success: true,
        message: "T√¨m th·∫•y ƒë∆°n h√†ng",
        data: booking,
      });
    } catch (error) {
      console.error("Error searching booking by order code:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi tra c·ª©u ƒë∆°n h√†ng",
        error: error.message,
      });
    }
  },
  getMyBookings: async (req, res) => {
    try {
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      const bookings = await RepairRequest.find({
        customer: decodedToken.id || decodedToken._id,
      })
        .populate("service", "name description basePrice duration category")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone avatar",
          },
        })
        .sort({ createdAt: -1 });

      return res.status(200).json({
        success: true,
        message: "L·∫•y danh s√°ch booking th√†nh c√¥ng",
        data: bookings,
      });
    } catch (error) {
      console.error("Error getting my bookings:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y danh s√°ch booking",
        error: error.message,
      });
    }
  },

  // API ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i booking v√† timeline
  updateBookingStatus: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const { status, description } = req.body;

      // Validate status
      const validStatuses = [
        "pending",
        "accepted",
        "in_progress",
        "completed",
        "cancelled",
        "warranty_requested",
      ];

      if (!validStatuses.includes(status)) {
        return res.status(400).json({
          success: false,
          message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá",
        });
      }

      const booking = await RepairRequest.findById(bookingId);
      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      // Get status description
      const getStatusDescription = (status) => {
        const descriptions = {
          pending: "ƒê∆°n h√†ng ƒëang ch·ªù x·ª≠ l√Ω",
          accepted: "K·ªπ thu·∫≠t vi√™n ƒë√£ x√°c nh·∫≠n v√† s·∫Ω ƒë·∫øn ƒë√∫ng gi·ªù h·∫πn",
          in_progress: "K·ªπ thu·∫≠t vi√™n ƒëang th·ª±c hi·ªán d·ªãch v·ª•",
          completed: "D·ªãch v·ª• ƒë√£ ho√†n th√†nh th√†nh c√¥ng",
          cancelled: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy",
          warranty_requested: "Y√™u c·∫ßu b·∫£o h√†nh ƒë√£ ƒë∆∞·ª£c g·ª≠i",
        };
        return descriptions[status] || "Tr·∫°ng th√°i ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t";
      };

      // Update booking status
      booking.status = status;

      // Add to timeline
      booking.timeline.push({
        status: status,
        description: description || getStatusDescription(status),
        createdAt: new Date(),
      });

      // Special handling for completion
      if (status === "completed") {
        booking.payment.status = "paid";
        booking.payment.paidAt = new Date();
        booking.commission.status = "eligible";
      }

      await booking.save();

      // Return updated booking with populated fields
      const updatedBooking = await RepairRequest.findById(bookingId)
        .populate("customer", "fullName email phone")
        .populate("service", "name description basePrice duration category")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone avatar",
          },
        });

      return res.status(200).json({
        success: true,
        message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng",
        data: updatedBooking,
      });
    } catch (error) {
      console.error("Error updating booking status:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i",
        error: error.message,
      });
    }
  },

  // API ƒë·ªÉ th√™m ghi ch√∫ v√†o timeline
  addTimelineNote: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const { note } = req.body;

      if (!note || note.trim().length === 0) {
        return res.status(400).json({
          success: false,
          message: "Ghi ch√∫ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
        });
      }

      const booking = await RepairRequest.findById(bookingId);
      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      // Add note to timeline
      booking.timeline.push({
        status: booking.status,
        description: note.trim(),
        createdAt: new Date(),
      });

      await booking.save();

      return res.status(200).json({
        success: true,
        message: "Th√™m ghi ch√∫ th√†nh c√¥ng",
        data: booking,
      });
    } catch (error) {
      console.error("Error adding timeline note:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi th√™m ghi ch√∫",
        error: error.message,
      });
    }
  },

  // API ƒë·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa k·ªπ thu·∫≠t vi√™n
  getTechnicianBookings: async (req, res) => {
    try {
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      // T√¨m technician theo account ID
      const technician = await Technician.findOne({
        account: decodedToken.id || decodedToken._id,
      });

      if (!technician) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin k·ªπ thu·∫≠t vi√™n",
        });
      }

      const { page = 1, limit = 20, status } = req.query;
      const skip = (page - 1) * limit;

      // T·∫°o filter query
      const filterQuery = { technician: technician._id };
      if (status) {
        filterQuery.status = status;
      }

      const bookings = await RepairRequest.find(filterQuery)
        .populate("customer", "fullName email phone address")
        .populate("service", "name description basePrice duration category")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone avatar",
          },
        })
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(parseInt(limit));

      const total = await RepairRequest.countDocuments(filterQuery);

      return res.status(200).json({
        success: true,
        message: "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng",
        data: {
          bookings,
          pagination: {
            currentPage: parseInt(page),
            totalPages: Math.ceil(total / limit),
            totalItems: total,
            itemsPerPage: parseInt(limit),
          },
        },
      });
    } catch (error) {
      console.error("Error getting technician bookings:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y danh s√°ch ƒë∆°n h√†ng",
        error: error.message,
      });
    }
  },

  // Technician confirms order (pending -> accepted)
  confirmOrder: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const { notes } = req.body;

      // Decode token ƒë·ªÉ l·∫•y technician info
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      // Validate bookingId
      if (!mongoose.Types.ObjectId.isValid(bookingId)) {
        return res.status(400).json({
          success: false,
          message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá",
        });
      }

      // Find booking
      const booking = await RepairRequest.findById(bookingId)
        .populate("customer", "fullName email phone")
        .populate("service", "name description")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        });

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      // Check if technician is assigned to this booking
      if (
        !booking.technician ||
        booking.technician.account._id.toString() !== decodedToken.id
      ) {
        return res.status(403).json({
          success: false,
          message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x·ª≠ l√Ω ƒë∆°n h√†ng n√†y",
        });
      }

      // Check if booking is in pending_confirmation status
      if (booking.status !== "pending_confirmation") {
        return res.status(400).json({
          success: false,
          message: `ƒê∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i '${booking.status}', kh√¥ng th·ªÉ x√°c nh·∫≠n`,
        });
      }

      // Check if confirmation timeout has passed
      if (
        booking.confirmationTimeout &&
        new Date() > booking.confirmationTimeout
      ) {
        return res.status(400).json({
          success: false,
          message: "Th·ªùi gian x√°c nh·∫≠n ƒë√£ h·∫øt, ƒë∆°n h√†ng s·∫Ω ƒë∆∞·ª£c ph√¢n c√¥ng l·∫°i",
        });
      }

      // Update status to accepted
      booking.status = "accepted";
      booking.confirmationTimeout = null; // Clear timeout
      booking.confirmationAssignedAt = null; // Clear assignment time
      booking.timeline.push({
        status: "accepted",
        description: notes
          ? `K·ªπ thu·∫≠t vi√™n ${booking.technician.account.fullName} ƒë√£ x√°c nh·∫≠n ƒë∆°n h√†ng. Ghi ch√∫: ${notes}`
          : `K·ªπ thu·∫≠t vi√™n ${booking.technician.account.fullName} ƒë√£ x√°c nh·∫≠n ƒë∆°n h√†ng`,
        createdAt: new Date(),
      });

      await booking.save();

      return res.status(200).json({
        success: true,
        message: "X√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng",
        data: booking,
      });
    } catch (error) {
      console.error("Error confirming order:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi x√°c nh·∫≠n ƒë∆°n h√†ng",
        error: error.message,
      });
    }
  },

  // Technician rejects order (pending_confirmation -> reassign)
  rejectOrder: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const { reason } = req.body;

      // Decode token ƒë·ªÉ l·∫•y technician info
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      // Validate bookingId
      if (!mongoose.Types.ObjectId.isValid(bookingId)) {
        return res.status(400).json({
          success: false,
          message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá",
        });
      }

      // Find booking
      const booking = await RepairRequest.findById(bookingId)
        .populate("customer", "fullName email phone")
        .populate("service", "name description duration")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        });

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      // Check if technician is assigned to this booking
      if (
        !booking.technician ||
        booking.technician.account._id.toString() !== decodedToken.id
      ) {
        return res.status(403).json({
          success: false,
          message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x·ª≠ l√Ω ƒë∆°n h√†ng n√†y",
        });
      }

      // Check if booking is in pending_confirmation status
      if (booking.status !== "pending_confirmation") {
        return res.status(400).json({
          success: false,
          message: `ƒê∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i '${booking.status}', kh√¥ng th·ªÉ t·ª´ ch·ªëi`,
        });
      }

      // Check if confirmation timeout has passed
      if (
        booking.confirmationTimeout &&
        new Date() > booking.confirmationTimeout
      ) {
        return res.status(400).json({
          success: false,
          message: "Th·ªùi gian x√°c nh·∫≠n ƒë√£ h·∫øt, ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ph√¢n c√¥ng l·∫°i",
        });
      }

      // Add rejection to timeline
      booking.timeline.push({
        status: "rejected",
        description: reason
          ? `K·ªπ thu·∫≠t vi√™n ${booking.technician.account.fullName} ƒë√£ t·ª´ ch·ªëi ƒë∆°n h√†ng. L√Ω do: ${reason}`
          : `K·ªπ thu·∫≠t vi√™n ${booking.technician.account.fullName} ƒë√£ t·ª´ ch·ªëi ƒë∆°n h√†ng`,
        createdAt: new Date(),
      });

      // Save rejection reason
      booking.rejectionReason = reason || "Kh√¥ng c√≥ l√Ω do";

      // Try to reassign to another technician
      const reassignResult = await reassignTechnician(booking);

      if (reassignResult.success) {
        return res.status(200).json({
          success: true,
          message: "ƒê√£ t·ª´ ch·ªëi ƒë∆°n h√†ng v√† t√¨m ƒë∆∞·ª£c k·ªπ thu·∫≠t vi√™n kh√°c",
          data: reassignResult.booking,
        });
      } else {
        return res.status(200).json({
          success: true,
          message: "ƒê√£ t·ª´ ch·ªëi ƒë∆°n h√†ng, ƒëang t√¨m k·ªπ thu·∫≠t vi√™n kh√°c",
          data: reassignResult.booking,
        });
      }
    } catch (error) {
      console.error("Error rejecting order:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi t·ª´ ch·ªëi ƒë∆°n h√†ng",
        error: error.message,
      });
    }
  },

  // Technician starts repair (accepted -> in_progress)
  startRepair: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const { notes, estimatedDuration } = req.body;

      // Decode token ƒë·ªÉ l·∫•y technician info
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      // Validate bookingId
      if (!mongoose.Types.ObjectId.isValid(bookingId)) {
        return res.status(400).json({
          success: false,
          message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá",
        });
      }

      // Find booking
      const booking = await RepairRequest.findById(bookingId)
        .populate("customer", "fullName email phone")
        .populate("service", "name description")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        });

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      // Check if technician is assigned to this booking
      if (
        !booking.technician ||
        booking.technician.account._id.toString() !== decodedToken.id
      ) {
        return res.status(403).json({
          success: false,
          message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x·ª≠ l√Ω ƒë∆°n h√†ng n√†y",
        });
      }

      // Check if booking is in accepted status
      if (booking.status !== "accepted") {
        return res.status(400).json({
          success: false,
          message: `ƒê∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i '${booking.status}', kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu s·ª≠a ch·ªØa`,
        });
      }

      // Update status to in_progress
      booking.status = "in_progress";

      let description = `K·ªπ thu·∫≠t vi√™n ${booking.technician.account.fullName} ƒë√£ b·∫Øt ƒë·∫ßu s·ª≠a ch·ªØa`;
      if (estimatedDuration) {
        description += `. Th·ªùi gian d·ª± ki·∫øn: ${estimatedDuration} ph√∫t`;
      }
      if (notes) {
        description += `. Ghi ch√∫: ${notes}`;
      }

      booking.timeline.push({
        status: "in_progress",
        description: description,
        createdAt: new Date(),
      });

      await booking.save();

      return res.status(200).json({
        success: true,
        message: "B·∫Øt ƒë·∫ßu s·ª≠a ch·ªØa th√†nh c√¥ng",
        data: booking,
      });
    } catch (error) {
      console.error("Error starting repair:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi b·∫Øt ƒë·∫ßu s·ª≠a ch·ªØa",
        error: error.message,
      });
    }
  },

  // Technician completes repair (in_progress -> completed)
  completeRepair: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const { notes, finalPrice, partsUsed, workDescription } = req.body;

      // Decode token ƒë·ªÉ l·∫•y technician info
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      // Validate bookingId
      if (!mongoose.Types.ObjectId.isValid(bookingId)) {
        return res.status(400).json({
          success: false,
          message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá",
        });
      }

      // Find booking
      const booking = await RepairRequest.findById(bookingId)
        .populate("customer", "fullName email phone")
        .populate("service", "name description commissionRate")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        });

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      // Check if technician is assigned to this booking
      if (
        !booking.technician ||
        booking.technician.account._id.toString() !== decodedToken.id
      ) {
        return res.status(403).json({
          success: false,
          message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x·ª≠ l√Ω ƒë∆°n h√†ng n√†y",
        });
      }

      // Check if booking is in in_progress status
      if (booking.status !== "in_progress") {
        return res.status(400).json({
          success: false,
          message: `ƒê∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i '${booking.status}', kh√¥ng th·ªÉ ho√†n th√†nh`,
        });
      }

      // Update final price if provided
      if (finalPrice && finalPrice > 0) {
        booking.price.amount = finalPrice;
      }

      // Update status to pending customer confirmation
      booking.status = "pending_customer_confirmation";
      booking.payment.status = "pending"; // Customer needs to pay after confirmation

      // Set customer confirmation timeout (2 minutes)
      const now = new Date();
      const timeoutDate = new Date(now.getTime() + 2 * 60 * 1000); // 2 minutes

      booking.customerConfirmation = {
        confirmationTimeout: timeoutDate,
        confirmationAssignedAt: now,
      };

      // Calculate commission amount (but don't set as eligible yet)
      const commissionAmount =
        (booking.price.amount * booking.service.commissionRate) / 100;
      booking.commission = {
        status: "pending",
        amount: commissionAmount,
      };

      // Create completion description
      let description = `K·ªπ thu·∫≠t vi√™n ${booking.technician.account.fullName} ƒë√£ ho√†n th√†nh s·ª≠a ch·ªØa v√† ch·ªù kh√°ch h√†ng x√°c nh·∫≠n`;
      if (workDescription) {
        description += `. C√¥ng vi·ªác ƒë√£ th·ª±c hi·ªán: ${workDescription}`;
      }
      if (partsUsed) {
        description += `. Linh ki·ªán ƒë√£ s·ª≠ d·ª•ng: ${partsUsed}`;
      }
      if (finalPrice) {
        description += `. T·ªïng chi ph√≠: ${finalPrice.toLocaleString()} VNƒê`;
      }
      if (notes) {
        description += `. Ghi ch√∫: ${notes}`;
      }

      booking.timeline.push({
        status: "pending_customer_confirmation",
        description: description,
        createdAt: new Date(),
      });

      await booking.save();

      return res.status(200).json({
        success: true,
        message: "Ho√†n th√†nh s·ª≠a ch·ªØa th√†nh c√¥ng, ch·ªù kh√°ch h√†ng x√°c nh·∫≠n",
        data: booking,
      });
    } catch (error) {
      console.error("Error completing repair:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi ho√†n th√†nh s·ª≠a ch·ªØa",
        error: error.message,
      });
    }
  },

  // Get technician's assigned orders
  getTechnicianOrders: async (req, res) => {
    try {
      const { status } = req.query;
      const { page = 1, limit = 10 } = req.query;

      // Decode token ƒë·ªÉ l·∫•y technician info
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      // Find technician by account ID
      const technician = await Technician.findOne({ account: decodedToken.id });
      if (!technician) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin k·ªπ thu·∫≠t vi√™n",
        });
      }

      // Build query
      const query = { technician: technician._id };
      if (status) {
        query.status = status;
      }

      // Get orders with pagination
      const orders = await RepairRequest.find(query)
        .populate("customer", "fullName email phone")
        .populate("service", "name description basePrice")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        })
        .sort({ createdAt: -1 })
        .limit(limit * 1)
        .skip((page - 1) * limit);

      const total = await RepairRequest.countDocuments(query);

      return res.status(200).json({
        success: true,
        message: "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng",
        data: orders,
        pagination: {
          total,
          page: parseInt(page),
          limit: parseInt(limit),
          totalPages: Math.ceil(total / limit),
        },
      });
    } catch (error) {
      console.error("Error getting technician orders:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y danh s√°ch ƒë∆°n h√†ng",
        error: error.message,
      });
    }
  },

  // Check and handle timeout confirmations
  checkTimeouts: async (req, res) => {
    try {
      const now = new Date();

      // T√¨m t·∫•t c·∫£ booking ƒëang ch·ªù x√°c nh·∫≠n v√† ƒë√£ h·∫øt timeout
      const expiredBookings = await RepairRequest.find({
        status: "pending_confirmation",
        confirmationTimeout: { $lt: now },
      })
        .populate("service", "name description duration")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        });

      console.log(`‚è∞ Found ${expiredBookings.length} expired confirmations`);

      const results = [];

      for (const booking of expiredBookings) {
        console.log(`‚è∞ Processing expired booking ${booking._id}`);

        // Th√™m timeout event v√†o timeline
        booking.timeline.push({
          status: "timeout",
          description: `K·ªπ thu·∫≠t vi√™n ${booking.technician.account.fullName} kh√¥ng ph·∫£n h·ªìi trong th·ªùi gian quy ƒë·ªãnh`,
          createdAt: new Date(),
        });

        // Th·ª≠ ph√¢n c√¥ng l·∫°i
        const reassignResult = await reassignTechnician(booking);

        results.push({
          bookingId: booking._id,
          orderCode: booking.orderCode,
          previousTechnician: booking.technician.account.fullName,
          reassignSuccess: reassignResult.success,
          newTechnician: reassignResult.success
            ? reassignResult.booking.technician?.account?.fullName
            : null,
        });
      }

      return res.status(200).json({
        success: true,
        message: `ƒê√£ x·ª≠ l√Ω ${expiredBookings.length} ƒë∆°n h√†ng h·∫øt h·∫°n x√°c nh·∫≠n`,
        data: results,
      });
    } catch (error) {
      console.error("Error checking timeouts:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi ki·ªÉm tra timeout",
        error: error.message,
      });
    }
  },

  // Customer confirms completion (pending_customer_confirmation -> completed)
  confirmCompletion: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const { rating, comment } = req.body;

      // Decode token ƒë·ªÉ l·∫•y customer info
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      // Validate bookingId
      if (!mongoose.Types.ObjectId.isValid(bookingId)) {
        return res.status(400).json({
          success: false,
          message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá",
        });
      }

      // Find booking
      const booking = await RepairRequest.findById(bookingId)
        .populate("customer", "fullName email phone")
        .populate("service", "name description commissionRate")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        });

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      // Check if customer owns this booking
      if (booking.customer._id.toString() !== decodedToken.id) {
        return res.status(403).json({
          success: false,
          message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x·ª≠ l√Ω ƒë∆°n h√†ng n√†y",
        });
      }

      // Check if booking is in pending_customer_confirmation status
      if (booking.status !== "pending_customer_confirmation") {
        return res.status(400).json({
          success: false,
          message: `ƒê∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i '${booking.status}', kh√¥ng th·ªÉ x√°c nh·∫≠n`,
        });
      }

      // Update status to completed
      booking.status = "completed";
      booking.payment.status = "pending"; // Customer needs to pay

      // Mark commission as eligible
      booking.commission.status = "eligible";

      // Save customer confirmation and clear timeout
      booking.customerConfirmation.confirmedAt = new Date();
      booking.customerConfirmation.satisfied = true;
      booking.customerConfirmation.confirmationTimeout = undefined;
      booking.customerConfirmation.confirmationAssignedAt = undefined;

      // Save feedback if provided
      if (rating || comment) {
        booking.feedback = {
          rating: rating || 5,
          comment: comment || "",
          createdAt: new Date(),
        };
      }

      // Add to timeline
      booking.timeline.push({
        status: "completed",
        description: `Kh√°ch h√†ng ${
          booking.customer.fullName
        } ƒë√£ x√°c nh·∫≠n ho√†n th√†nh c√¥ng vi·ªác${
          rating ? ` v√† ƒë√°nh gi√° ${rating} sao` : ""
        }`,
        createdAt: new Date(),
      });

      await booking.save();

      // Update technician stats
      await Technician.findByIdAndUpdate(booking.technician._id, {
        $inc: {
          completedJobs: 1,
          totalEarnings: booking.commission.amount,
        },
      });

      return res.status(200).json({
        success: true,
        message: "X√°c nh·∫≠n ho√†n th√†nh th√†nh c√¥ng",
        data: booking,
      });
    } catch (error) {
      console.error("Error confirming completion:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi x√°c nh·∫≠n ho√†n th√†nh",
        error: error.message,
      });
    }
  },

  // Customer reports complaint (pending_customer_confirmation -> complaint)
  reportComplaint: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const { reason, description } = req.body;

      // Validate input
      if (!reason || !description) {
        return res.status(400).json({
          success: false,
          message: "Vui l√≤ng cung c·∫•p l√Ω do v√† m√¥ t·∫£ khi·∫øu n·∫°i",
        });
      }

      // Decode token ƒë·ªÉ l·∫•y customer info
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      // Validate bookingId
      if (!mongoose.Types.ObjectId.isValid(bookingId)) {
        return res.status(400).json({
          success: false,
          message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá",
        });
      }

      // Find booking
      const booking = await RepairRequest.findById(bookingId)
        .populate("customer", "fullName email phone")
        .populate("service", "name description")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        });

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      // Check if customer owns this booking
      if (booking.customer._id.toString() !== decodedToken.id) {
        return res.status(403).json({
          success: false,
          message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x·ª≠ l√Ω ƒë∆°n h√†ng n√†y",
        });
      }

      // Check if booking is in pending_customer_confirmation status
      if (booking.status !== "pending_customer_confirmation") {
        return res.status(400).json({
          success: false,
          message: `ƒê∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i '${booking.status}', kh√¥ng th·ªÉ khi·∫øu n·∫°i`,
        });
      }

      // Update status to pending admin review
      booking.status = "pending_admin_review";

      // Keep commission as pending (not eligible) until admin decides
      booking.commission.status = "pending";

      // Save customer complaint and clear timeout
      booking.customerConfirmation.confirmedAt = new Date();
      booking.customerConfirmation.satisfied = false;
      booking.customerConfirmation.complaintReason = reason;
      booking.customerConfirmation.complaintDescription = description;
      booking.customerConfirmation.confirmationTimeout = undefined;
      booking.customerConfirmation.confirmationAssignedAt = undefined;

      // Add to timeline
      booking.timeline.push({
        status: "pending_admin_review",
        description: `Kh√°ch h√†ng ${booking.customer.fullName} kh√¥ng h√†i l√≤ng v√† t·∫°o khi·∫øu n·∫°i: ${reason}. Ch·ªù admin duy·ªát.`,
        createdAt: new Date(),
      });

      await booking.save();

      return res.status(200).json({
        success: true,
        message:
          "Khi·∫øu n·∫°i ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n. Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω trong th·ªùi gian s·ªõm nh·∫•t.",
        data: booking,
      });
    } catch (error) {
      console.error("Error reporting complaint:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi ghi nh·∫≠n khi·∫øu n·∫°i",
        error: error.message,
      });
    }
  },

  // Customer cancels complaint (complaint -> completed)
  cancelComplaint: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const { rating, comment } = req.body;

      // Decode token ƒë·ªÉ l·∫•y customer info
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      // Validate bookingId
      if (!mongoose.Types.ObjectId.isValid(bookingId)) {
        return res.status(400).json({
          success: false,
          message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá",
        });
      }

      // Find booking
      const booking = await RepairRequest.findById(bookingId)
        .populate("customer", "fullName email phone")
        .populate("service", "name description commissionRate")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        });

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      // Check if customer owns this booking
      if (booking.customer._id.toString() !== decodedToken.id) {
        return res.status(403).json({
          success: false,
          message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x·ª≠ l√Ω ƒë∆°n h√†ng n√†y",
        });
      }

      // Check if booking is in pending_admin_review or warranty_requested status
      if (
        !["pending_admin_review", "warranty_requested"].includes(booking.status)
      ) {
        return res.status(400).json({
          success: false,
          message: `ƒê∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i '${booking.status}', kh√¥ng th·ªÉ h·ªßy khi·∫øu n·∫°i`,
        });
      }

      // Update status to completed
      booking.status = "completed";
      booking.payment.status = "pending"; // Customer needs to pay

      // Mark commission as eligible
      booking.commission.status = "eligible";

      // Update customer confirmation and clear timeout
      booking.customerConfirmation.satisfied = true;
      booking.customerConfirmation.confirmedAt = new Date();
      booking.customerConfirmation.confirmationTimeout = undefined;
      booking.customerConfirmation.confirmationAssignedAt = undefined;
      // Clear complaint fields
      booking.customerConfirmation.complaintReason = undefined;
      booking.customerConfirmation.complaintDescription = undefined;

      // Save feedback if provided
      if (rating || comment) {
        booking.feedback = {
          rating: rating || 5,
          comment: comment || "",
          createdAt: new Date(),
        };
      }

      // Add to timeline
      booking.timeline.push({
        status: "completed",
        description: `Kh√°ch h√†ng ${
          booking.customer.fullName
        } ƒë√£ h·ªßy khi·∫øu n·∫°i v√† x√°c nh·∫≠n ho√†n th√†nh c√¥ng vi·ªác${
          rating ? ` v·ªõi ƒë√°nh gi√° ${rating} sao` : ""
        }`,
        createdAt: new Date(),
      });

      await booking.save();

      // Update technician stats
      await Technician.findByIdAndUpdate(booking.technician._id, {
        $inc: {
          completedJobs: 1,
          totalEarnings: booking.commission.amount,
        },
      });

      return res.status(200).json({
        success: true,
        message: "H·ªßy khi·∫øu n·∫°i th√†nh c√¥ng v√† x√°c nh·∫≠n ho√†n th√†nh",
        data: booking,
      });
    } catch (error) {
      console.error("Error canceling complaint:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi h·ªßy khi·∫øu n·∫°i",
        error: error.message,
      });
    }
  },

  // Check for customer confirmation timeouts and auto-complete orders
  checkCustomerConfirmationTimeouts: async (req, res) => {
    try {
      const now = new Date();

      // Find orders that are pending customer confirmation and have expired timeout
      const expiredOrders = await RepairRequest.find({
        status: "pending_customer_confirmation",
        "customerConfirmation.confirmationTimeout": { $lt: now },
      })
        .populate("customer", "fullName email phone")
        .populate("service", "name description commissionRate")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        });

      console.log(
        `Found ${expiredOrders.length} expired customer confirmation orders`
      );

      for (const booking of expiredOrders) {
        try {
          // Auto-complete the order
          booking.status = "completed";
          booking.payment.status = "pending";

          // Mark commission as eligible
          booking.commission.status = "eligible";

          // Update customer confirmation
          booking.customerConfirmation.satisfied = true;
          booking.customerConfirmation.confirmedAt = new Date();

          // Add automatic completion to timeline
          booking.timeline.push({
            status: "completed",
            description: `ƒê∆°n h√†ng ƒë∆∞·ª£c t·ª± ƒë·ªông ho√†n th√†nh do kh√°ch h√†ng kh√¥ng x√°c nh·∫≠n trong th·ªùi h·∫°n 2 ph√∫t`,
            createdAt: new Date(),
          });

          await booking.save();

          // Update technician stats
          await Technician.findByIdAndUpdate(booking.technician._id, {
            $inc: {
              completedJobs: 1,
              totalEarnings: booking.commission.amount,
            },
          });

          console.log(
            `Auto-completed order ${booking.orderCode} due to customer confirmation timeout`
          );
        } catch (error) {
          console.error(
            `Error auto-completing order ${booking.orderCode}:`,
            error
          );
        }
      }

      return res.status(200).json({
        success: true,
        message: `Processed ${expiredOrders.length} expired customer confirmation orders`,
        data: { processedCount: expiredOrders.length },
      });
    } catch (error) {
      console.error("Error checking customer confirmation timeouts:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi ki·ªÉm tra timeout x√°c nh·∫≠n kh√°ch h√†ng",
        error: error.message,
      });
    }
  },

  // Admin gets all complaints (both pending and processed)
  getAllComplaints: async (req, res) => {
    try {
      const { status } = req.query; // pending, processed, all

      let query = {
        "customerConfirmation.complaintReason": { $exists: true },
      };

      // Filter by status if provided
      if (status === "pending") {
        query.status = "pending_admin_review";
      } else if (status === "processed") {
        query["adminReview.reviewedAt"] = { $exists: true };
      }
      // If status is 'all' or not provided, get all complaints

      const complaints = await RepairRequest.find(query)
        .populate("customer", "fullName email phone")
        .populate("service", "name description")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        })
        .sort({ createdAt: -1 });

      return res.status(200).json({
        success: true,
        message: "L·∫•y danh s√°ch khi·∫øu n·∫°i th√†nh c√¥ng",
        data: complaints,
      });
    } catch (error) {
      console.error("Error getting complaints:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y danh s√°ch khi·∫øu n·∫°i",
        error: error.message,
      });
    }
  },

  // Legacy function for backward compatibility - will be removed later
  getComplaintsPendingReview: async (req, res) => {
    try {
      const complaints = await RepairRequest.find({
        status: "pending_admin_review",
      })
        .populate("customer", "fullName email phone")
        .populate("service", "name description")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        })
        .sort({ createdAt: -1 });

      return res.status(200).json({
        success: true,
        message: "L·∫•y danh s√°ch khi·∫øu n·∫°i th√†nh c√¥ng",
        data: complaints,
      });
    } catch (error) {
      console.error("Error getting complaints:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y danh s√°ch khi·∫øu n·∫°i",
        error: error.message,
      });
    }
  },

  // Admin reviews complaint (approve/reject)
  reviewComplaint: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const {
        decision,
        reason,
        assignedTechnicianId,
        scheduledDate,
        scheduledTime,
      } = req.body;

      // Validate input
      if (!decision || !["approved", "rejected"].includes(decision)) {
        return res.status(400).json({
          success: false,
          message: "Quy·∫øt ƒë·ªãnh kh√¥ng h·ª£p l·ªá (approved/rejected)",
        });
      }

      if (!reason) {
        return res.status(400).json({
          success: false,
          message: "Vui l√≤ng cung c·∫•p l√Ω do quy·∫øt ƒë·ªãnh",
        });
      }

      // Additional validation for approved complaints
      if (decision === "approved") {
        if (!assignedTechnicianId) {
          return res.status(400).json({
            success: false,
            message: "Vui l√≤ng ch·ªçn k·ªπ thu·∫≠t vi√™n cho vi·ªác b·∫£o h√†nh",
          });
        }

        if (!scheduledDate || !scheduledTime) {
          return res.status(400).json({
            success: false,
            message: "Vui l√≤ng ch·ªçn ng√†y v√† gi·ªù th·ª±c hi·ªán b·∫£o h√†nh",
          });
        }
      }

      // Decode admin token
      const decodedToken = decodeToken(req.headers["authorization"]);
      if (!decodedToken || decodedToken.role !== "admin") {
        return res.status(403).json({
          success: false,
          message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
        });
      }

      // Find booking
      const booking = await RepairRequest.findById(bookingId)
        .populate("customer", "fullName email phone")
        .populate("service", "name description commissionRate")
        .populate({
          path: "technician",
          populate: {
            path: "account",
            select: "fullName phone",
          },
        });

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      if (booking.status !== "pending_admin_review") {
        return res.status(400).json({
          success: false,
          message: "ƒê∆°n h√†ng kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù duy·ªát",
        });
      }

      // Update admin review
      booking.adminReview = {
        reviewedBy: decodedToken.id,
        reviewedAt: new Date(),
        decision,
        reason,
      };

      if (decision === "approved") {
        // Store original technician info before reassigning
        const originalTechnicianId = booking.technician._id;
        const originalTechnicianName =
          booking.technician.account?.fullName || booking.technician.fullName;

        // If approved, create warranty request
        booking.status = "warranty_requested";
        booking.commission.status = "rejected"; // Original technician loses commission

        // Increase complaint count for ORIGINAL technician (the one being complained about)
        await Technician.findByIdAndUpdate(originalTechnicianId, {
          $inc: { complaintCount: 1 },
        });

        console.log(
          `üî∏ Increased complaint count for original technician: ${originalTechnicianName} (ID: ${originalTechnicianId})`
        );

        // Check if original technician should be locked (5 complaints)
        const originalTechnician = await Technician.findById(
          originalTechnicianId
        );
        if (originalTechnician.complaintCount >= 5) {
          await Technician.findByIdAndUpdate(originalTechnicianId, {
            status: "banned",
            "lockInfo.isLocked": true,
            "lockInfo.lockReason": "V∆∞·ª£t qu√° s·ªë l·∫ßn khi·∫øu n·∫°i cho ph√©p (5 l·∫ßn)",
            "lockInfo.lockedAt": new Date(),
            "lockInfo.lockedBy": decodedToken.id,
          });

          // Add notification to timeline
          booking.timeline.push({
            status: "technician_banned",
            description: `K·ªπ thu·∫≠t vi√™n ${originalTechnicianName} ƒë√£ b·ªã kh√≥a t√†i kho·∫£n do v∆∞·ª£t qu√° s·ªë l·∫ßn khi·∫øu n·∫°i cho ph√©p`,
            createdAt: new Date(),
          });

          console.log(
            `üîí Locked technician account: ${originalTechnicianName} (5+ complaints)`
          );
        }

        // Assign new technician if provided
        if (assignedTechnicianId) {
          // Validate new technician
          const newTechnician = await Technician.findById(assignedTechnicianId);
          if (!newTechnician) {
            return res.status(400).json({
              success: false,
              message: "K·ªπ thu·∫≠t vi√™n ƒë∆∞·ª£c ch·ªçn kh√¥ng t·ªìn t·∫°i",
            });
          }

          // Create new scheduled time for warranty
          const warrantyDateTime = createDateTime(scheduledDate, scheduledTime);

          // Check technician availability for warranty time
          const service = await Service.findById(booking.service);
          const serviceDuration = service ? service.duration : 120; // Default 2 hours

          const isAvailable = await checkTechnicianAvailability(
            assignedTechnicianId,
            warrantyDateTime,
            serviceDuration
          );

          if (!isAvailable) {
            return res.status(400).json({
              success: false,
              message:
                "K·ªπ thu·∫≠t vi√™n ƒë√£ c√≥ l·ªãch tr√¨nh kh√°c trong th·ªùi gian n√†y. Vui l√≤ng ch·ªçn k·ªπ thu·∫≠t vi√™n kh√°c ho·∫∑c th·ªùi gian kh√°c.",
            });
          }

          booking.adminReview.assignedTechnician = assignedTechnicianId;
          booking.technician = assignedTechnicianId; // Assign new technician for warranty
          booking.scheduledTime = warrantyDateTime; // Set new scheduled time

          // Create commission for new technician
          booking.commission = {
            status: "pending",
            amount: booking.commission.amount, // Same commission amount
          };

          booking.timeline.push({
            status: "warranty_requested",
            description: `Admin ƒë√£ duy·ªát khi·∫øu n·∫°i. K·ªπ thu·∫≠t vi√™n ${originalTechnicianName} b·ªã tƒÉng complaint count. Ph√¢n c√¥ng k·ªπ thu·∫≠t vi√™n m·ªõi: ${
              newTechnician.account?.fullName || newTechnician.fullName
            }. Th·ªùi gian: ${formatDateTimeForDisplay(warrantyDateTime)}`,
            createdAt: new Date(),
          });

          console.log(
            `‚úÖ Assigned new technician for warranty: ${
              newTechnician.account?.fullName || newTechnician.fullName
            } (ID: ${assignedTechnicianId})`
          );
        } else {
          booking.timeline.push({
            status: "warranty_requested",
            description: `Admin ƒë√£ duy·ªát khi·∫øu n·∫°i. K·ªπ thu·∫≠t vi√™n ${originalTechnicianName} b·ªã tƒÉng complaint count. Ch·ªù ph√¢n c√¥ng k·ªπ thu·∫≠t vi√™n m·ªõi.`,
            createdAt: new Date(),
          });
        }
      } else {
        // If rejected, complete the order
        booking.status = "completed";
        booking.commission.status = "eligible"; // Technician gets commission
        booking.timeline.push({
          status: "completed",
          description: `Admin ƒë√£ t·ª´ ch·ªëi khi·∫øu n·∫°i. L√Ω do: ${reason}`,
          createdAt: new Date(),
        });

        // Update technician stats
        await Technician.findByIdAndUpdate(booking.technician._id, {
          $inc: {
            completedJobs: 1,
            totalEarnings: booking.commission.amount,
          },
        });
      }

      await booking.save();

      return res.status(200).json({
        success: true,
        message: `ƒê√£ ${
          decision === "approved" ? "duy·ªát" : "t·ª´ ch·ªëi"
        } khi·∫øu n·∫°i`,
        data: booking,
      });
    } catch (error) {
      console.error("Error reviewing complaint:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi x·ª≠ l√Ω khi·∫øu n·∫°i",
        error: error.message,
      });
    }
  },

  // Get available technicians for warranty assignment
  getAvailableTechniciansForWarranty: async (req, res) => {
    try {
      const { serviceId, excludeTechnicianId, customerAddress } = req.query;

      console.log("üîç getAvailableTechniciansForWarranty called with:", {
        serviceId,
        excludeTechnicianId,
        customerAddress,
      });

      const query = {
        status: "active",
        depositStatus: "paid",
        "lockInfo.isLocked": false,
      };

      // Exclude original technician
      if (excludeTechnicianId) {
        query._id = { $ne: excludeTechnicianId };
      }

      // Filter by service if provided
      if (serviceId) {
        query.$or = [
          { services: { $in: [serviceId] } },
          { services: { $size: 0 } },
          { services: { $exists: false } },
        ];
      }

      console.log("üìã Query filter:", query);

      let technicians = await Technician.find(query)
        .populate("account", "fullName phone")
        .select(
          "account fullName phone district experience rating completedJobs complaintCount services"
        )
        .sort({ rating: -1, completedJobs: -1 });

      console.log(
        `‚úÖ Found ${technicians.length} technicians before location filtering`
      );

      // Filter by location if customer address is provided
      if (customerAddress) {
        const customerDistrict = extractDistrict(customerAddress);
        console.log("üìç Customer district:", customerDistrict);

        if (customerDistrict) {
          // Sort by location priority: same district first, then adjacent districts
          technicians = technicians.sort((a, b) => {
            const aSameDistrict = a.district === customerDistrict ? 1 : 0;
            const bSameDistrict = b.district === customerDistrict ? 1 : 0;

            if (aSameDistrict !== bSameDistrict) {
              return bSameDistrict - aSameDistrict; // Same district first
            }

            const aAdjacent = isAdjacentDistrict(a.district, customerDistrict)
              ? 1
              : 0;
            const bAdjacent = isAdjacentDistrict(b.district, customerDistrict)
              ? 1
              : 0;

            if (aAdjacent !== bAdjacent) {
              return bAdjacent - aAdjacent; // Adjacent districts next
            }

            // If same location priority, sort by rating and completed jobs
            if (a.rating !== b.rating) {
              return b.rating - a.rating;
            }

            return b.completedJobs - a.completedJobs;
          });
        }
      }

      // Format the response data to ensure proper field mapping
      const formattedTechnicians = technicians.map((tech) => ({
        _id: tech._id,
        fullName: tech.account?.fullName || tech.fullName,
        phone: tech.account?.phone || tech.phone,
        district: tech.district,
        experience: tech.experience,
        rating: tech.rating,
        completedJobs: tech.completedJobs,
        complaintCount: tech.complaintCount,
      }));

      console.log("üéØ Final technicians list:", formattedTechnicians);

      return res.status(200).json({
        success: true,
        message: "L·∫•y danh s√°ch k·ªπ thu·∫≠t vi√™n th√†nh c√¥ng",
        data: formattedTechnicians,
      });
    } catch (error) {
      console.error("‚ùå Error getting available technicians:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y danh s√°ch k·ªπ thu·∫≠t vi√™n",
        error: error.message,
      });
    }
  },

  // Get technician complaint statistics
  getTechnicianComplaintStats: async (req, res) => {
    try {
      const stats = await Technician.aggregate([
        {
          $group: {
            _id: null,
            totalTechnicians: { $sum: 1 },
            activeTechnicians: {
              $sum: { $cond: [{ $eq: ["$status", "active"] }, 1, 0] },
            },
            lockedTechnicians: {
              $sum: { $cond: ["$lockInfo.isLocked", 1, 0] },
            },
            totalComplaints: { $sum: "$complaintCount" },
            avgComplaintCount: { $avg: "$complaintCount" },
          },
        },
      ]);

      const topComplaintTechnicians = await Technician.find({
        complaintCount: { $gt: 0 },
      })
        .populate("account", "fullName phone")
        .select("fullName phone complaintCount completedJobs status lockInfo")
        .sort({ complaintCount: -1 })
        .limit(10);

      return res.status(200).json({
        success: true,
        message: "L·∫•y th·ªëng k√™ khi·∫øu n·∫°i th√†nh c√¥ng",
        data: {
          stats: stats[0] || {
            totalTechnicians: 0,
            activeTechnicians: 0,
            lockedTechnicians: 0,
            totalComplaints: 0,
            avgComplaintCount: 0,
          },
          topComplaintTechnicians,
        },
      });
    } catch (error) {
      console.error("Error getting complaint stats:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y th·ªëng k√™ khi·∫øu n·∫°i",
        error: error.message,
      });
    }
  },

  // Get available time slots for a technician on a specific date
  getAvailableTimeSlots: async (req, res) => {
    try {
      const { technicianId, date } = req.query;

      if (!technicianId || !date) {
        return res.status(400).json({
          success: false,
          message: "Thi·∫øu th√¥ng tin technicianId ho·∫∑c date",
        });
      }

      // Validate technician exists
      const technician = await Technician.findById(technicianId);
      if (!technician) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y k·ªπ thu·∫≠t vi√™n",
        });
      }

      // Parse date
      const requestedDate = new Date(date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      if (requestedDate < today) {
        return res.status(400).json({
          success: false,
          message: "Kh√¥ng th·ªÉ ch·ªçn ng√†y trong qu√° kh·ª©",
        });
      }

      // Generate available time slots
      const timeSlots = [];
      const startHour = 7; // 7:00 AM
      const endHour = 21; // 9:00 PM

      for (let hour = startHour; hour < endHour; hour++) {
        const timeSlot = `${hour.toString().padStart(2, "0")}:00`;
        timeSlots.push(timeSlot);
      }

      // Check existing bookings for this technician on this date
      const existingBookings = await RepairRequest.find({
        "technician._id": technicianId,
        scheduledTime: {
          $gte: new Date(date + "T00:00:00.000Z"),
          $lt: new Date(date + "T23:59:59.999Z"),
        },
        status: { $in: ["accepted", "in_progress"] },
      });

      // Filter out occupied time slots
      const availableSlots = timeSlots.filter((slot) => {
        const [hour] = slot.split(":");
        const slotTime = new Date(date + `T${hour}:00:00.000Z`);

        return !existingBookings.some((booking) => {
          const bookingTime = new Date(booking.scheduledTime);
          const timeDiff = Math.abs(slotTime - bookingTime) / (1000 * 60 * 60);
          return timeDiff < 2; // 2 hour buffer
        });
      });

      return res.status(200).json({
        success: true,
        message: "L·∫•y khung gi·ªù tr·ªëng th√†nh c√¥ng",
        data: availableSlots,
      });
    } catch (error) {
      console.error("Error getting available time slots:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y khung gi·ªù tr·ªëng",
        error: error.message,
      });
    }
  },

  // Complete warranty repair (for technician)
  completeWarrantyRepair: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const { workDescription, partsUsed, notes } = req.body;
      const token = req.headers.authorization?.split(" ")[1];

      if (!token) {
        return res.status(401).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá",
        });
      }

      const decodedToken = jwt.verify(token, process.env.JWT_SECRET);
      const technicianId = decodedToken.id;

      // Find booking
      const booking = await RepairRequest.findById(bookingId)
        .populate("technician", "account")
        .populate("customer", "fullName phone")
        .populate("service", "name");

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      // Check if technician is assigned to this booking
      if (booking.technician._id.toString() !== technicianId) {
        return res.status(403).json({
          success: false,
          message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y",
        });
      }

      // Check if booking is in warranty_requested status
      if (booking.status !== "warranty_requested") {
        return res.status(400).json({
          success: false,
          message: "ƒê∆°n h√†ng kh√¥ng ·ªü tr·∫°ng th√°i b·∫£o h√†nh",
        });
      }

      // Update booking status to warranty_completed
      booking.status = "warranty_completed";
      booking.warrantyWork = {
        completedAt: new Date(),
        workDescription: workDescription || "ƒê√£ ho√†n th√†nh b·∫£o h√†nh",
        partsUsed: partsUsed || [],
        notes: notes || "",
      };

      // Add to timeline
      booking.timeline.push({
        status: "warranty_completed",
        description: `K·ªπ thu·∫≠t vi√™n ƒë√£ ho√†n th√†nh b·∫£o h√†nh: ${
          workDescription || "ƒê√£ ho√†n th√†nh b·∫£o h√†nh"
        }`,
        createdAt: new Date(),
      });

      await booking.save();

      return res.status(200).json({
        success: true,
        message: "Ho√†n th√†nh b·∫£o h√†nh th√†nh c√¥ng",
        data: booking,
      });
    } catch (error) {
      console.error("Error completing warranty repair:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi ho√†n th√†nh b·∫£o h√†nh",
        error: error.message,
      });
    }
  },

  // Customer confirms warranty completion
  confirmWarrantyCompletion: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const { rating, comment } = req.body;

      // Find booking
      const booking = await RepairRequest.findById(bookingId)
        .populate("technician", "account")
        .populate("customer", "fullName phone")
        .populate("service", "name");

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      // Check if booking is in warranty_completed status
      if (booking.status !== "warranty_completed") {
        return res.status(400).json({
          success: false,
          message: "ƒê∆°n h√†ng kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n b·∫£o h√†nh",
        });
      }

      // Update booking status to completed
      booking.status = "completed";
      booking.warrantyConfirmation = {
        confirmedAt: new Date(),
        satisfied: true,
        rating: rating || 5,
        comment: comment || "",
      };

      // Add to timeline
      booking.timeline.push({
        status: "warranty_confirmed",
        description: `Kh√°ch h√†ng ƒë√£ x√°c nh·∫≠n h√†i l√≤ng v·ªõi d·ªãch v·ª• b·∫£o h√†nh. ƒê√°nh gi√°: ${
          rating || 5
        } sao`,
        createdAt: new Date(),
      });

      await booking.save();

      return res.status(200).json({
        success: true,
        message: "X√°c nh·∫≠n b·∫£o h√†nh th√†nh c√¥ng",
        data: booking,
      });
    } catch (error) {
      console.error("Error confirming warranty completion:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi x√°c nh·∫≠n b·∫£o h√†nh",
        error: error.message,
      });
    }
  },

  // Customer reports warranty complaint
  reportWarrantyComplaint: async (req, res) => {
    try {
      const { bookingId } = req.params;
      const { reason, description } = req.body;

      if (!reason || !description) {
        return res.status(400).json({
          success: false,
          message: "Vui l√≤ng cung c·∫•p l√Ω do v√† m√¥ t·∫£ khi·∫øu n·∫°i",
        });
      }

      // Find booking
      const booking = await RepairRequest.findById(bookingId)
        .populate("technician", "account")
        .populate("customer", "fullName phone")
        .populate("service", "name");

      if (!booking) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        });
      }

      // Check if booking is in warranty_completed status
      if (booking.status !== "warranty_completed") {
        return res.status(400).json({
          success: false,
          message: "ƒê∆°n h√†ng kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n b·∫£o h√†nh",
        });
      }

      // Update booking status to pending_admin_review
      booking.status = "pending_admin_review";
      booking.warrantyComplaint = {
        complainedAt: new Date(),
        reason: reason,
        description: description,
      };

      // Add to timeline
      booking.timeline.push({
        status: "warranty_complaint",
        description: `Kh√°ch h√†ng ƒë√£ khi·∫øu n·∫°i v·ªÅ d·ªãch v·ª• b·∫£o h√†nh. L√Ω do: ${reason}`,
        createdAt: new Date(),
      });

      await booking.save();

      return res.status(200).json({
        success: true,
        message: "Ghi nh·∫≠n khi·∫øu n·∫°i b·∫£o h√†nh th√†nh c√¥ng",
        data: booking,
      });
    } catch (error) {
      console.error("Error reporting warranty complaint:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server khi ghi nh·∫≠n khi·∫øu n·∫°i b·∫£o h√†nh",
        error: error.message,
      });
    }
  },
};

module.exports = BookingController;
