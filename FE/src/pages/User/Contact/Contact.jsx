import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { addItems, getItems } from "../../../services/custom.api";
import { motion } from "framer-motion"; // eslint-disable-line
import Header from "../../../components/Header/Header";
import Footer from "../../../components/Footer/Footer";
import { useNotification } from "../../../contexts/NotificationContext";

function Contact() {
  const [formStatus, setFormStatus] = useState("idle");
  const { showNotification } = useNotification();
  const [services, setServices] = useState([]);
  useEffect(() => {
    getServices();
  }, []);
  const getServices = async () => {
    await getItems("admin/get-services").then((res) => {
      setServices(res.data);
    });
  };
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm();

  const onSubmit = async (data) => {
    setFormStatus("submitting");

    try {
      const res = await addItems("contact/contact-us", data);
      showNotification(res.status === 200 ? "success" : "error", res.data.msg);
      setFormStatus(res.status === 200 ? "success" : "error");
      if (res.status === 200) {
        reset();
        setTimeout(() => {
          setFormStatus("idle");
        }, 3000);
      }
    } catch {
      setFormStatus("error");
      showNotification("error", "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }
  };

  const contactMethods = [
    {
      icon: (
        <svg
          className="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24">
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
          />
        </svg>
      ),
      title: "Hotline 24/7",
      content: "+84 86 54 216 07",
      description: "H·ªó tr·ª£ kh√°ch h√†ng 24/7",
      color: "bg-blue-500",
      link: "tel:+84865421607",
    },
    {
      icon: (
        <svg
          className="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24">
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
          />
        </svg>
      ),
      title: "Email",
      content: "support@kcare.vn",
      description: "Ph·∫£n h·ªìi trong 1-2 gi·ªù",
      color: "bg-green-500",
      link: "mailto:support@kcare.vn",
    },
    {
      icon: (
        <svg
          className="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24">
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
          />
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
          />
        </svg>
      ),
      title: "ƒê·ªãa ch·ªâ",
      content: "Qu·∫≠n 7, TP.HCM",
      description: "Tr·ª• s·ªü ch√≠nh",
      color: "bg-purple-500",
      link: "#",
    },
    {
      icon: (
        <svg
          className="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24">
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
          />
        </svg>
      ),
      title: "Gi·ªù l√†m vi·ªác",
      content: "24/7",
      description: "Li√™n h·ªá 24/7",
      color: "bg-orange-500",
    },
  ];

  const features = [
    {
      icon: (
        <svg
          className="w-8 h-8"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24">
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M13 10V3L4 14h7v7l9-11h-7z"
          />
        </svg>
      ),
      title: "Ph·∫£n h·ªìi nhanh",
      description: "Cam k·∫øt ph·∫£n h·ªìi trong v√≤ng 30 ph√∫t",
    },
    {
      icon: (
        <svg
          className="w-8 h-8"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24">
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
          />
        </svg>
      ),
      title: "Chuy√™n nghi·ªáp",
      description: "ƒê·ªôi ng≈© k·ªπ thu·∫≠t vi√™n gi√†u kinh nghi·ªám",
    },
    {
      icon: (
        <svg
          className="w-8 h-8"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24">
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"
          />
        </svg>
      ),
      title: "Gi√° c·∫£ h·ª£p l√Ω",
      description: "Chi ph√≠ minh b·∫°ch, kh√¥ng ph√°t sinh",
    },
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />

      {/* Hero Section */}
      <section className="relative bg-gradient-to-br from-blue-600 via-blue-700 to-indigo-800 pt-32 lg:pt-40 pb-20 overflow-hidden">
        {/* Background decorations */}
        <div className="absolute inset-0 bg-black opacity-10"></div>
        <div className="absolute top-10 left-10 w-72 h-72 bg-white opacity-10 rounded-full blur-3xl"></div>
        <div className="absolute bottom-10 right-10 w-96 h-96 bg-blue-300 opacity-20 rounded-full blur-3xl"></div>

        <div className="container mx-auto px-4 relative z-10">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="text-center max-w-4xl mx-auto">
            <span className="inline-block px-4 py-2 bg-blue-500 bg-opacity-20 text-blue-100 text-sm font-medium rounded-full mb-6 backdrop-blur-sm border border-blue-400 border-opacity-30">
              üõ†Ô∏è D·ªãch v·ª• s·ª≠a ch·ªØa chuy√™n nghi·ªáp
            </span>
            <h1 className="text-4xl md:text-6xl font-bold text-white mb-6 leading-tight">
              Li√™n H·ªá V·ªõi Ch√∫ng T√¥i
            </h1>
            <p className="text-xl text-blue-100 mb-8 max-w-3xl mx-auto leading-relaxed">
              Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n 24/7. H√£y ƒë·ªÉ l·∫°i th√¥ng tin ƒë·ªÉ
              nh·∫≠n ƒë∆∞·ª£c d·ªãch v·ª• s·ª≠a ch·ªØa t·ªët nh·∫•t v·ªõi chi ph√≠ h·ª£p l√Ω nh·∫•t.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <a
                href="tel:+84865421607"
                className="inline-flex items-center justify-center px-8 py-4 bg-white text-blue-600 font-semibold rounded-xl hover:bg-gray-100 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1">
                <svg
                  className="w-5 h-5 mr-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
                  />
                </svg>
                G·ªçi ngay
              </a>
              <a
                href="#contact-form"
                className="inline-flex items-center justify-center px-8 py-4 bg-transparent text-white font-semibold rounded-xl border-2 border-white hover:bg-white hover:text-blue-600 transition-all duration-300">
                <svg
                  className="w-5 h-5 mr-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                  />
                </svg>
                G·ª≠i y√™u c·∫ßu
              </a>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Contact Methods */}
      <section className="py-20 bg-white">
        <div className="container mx-auto px-4">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            viewport={{ once: true }}
            className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              Nhi·ªÅu C√°ch ƒê·ªÉ Li√™n H·ªá
            </h2>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Ch·ªçn c√°ch th·ª©c li√™n h·ªá ph√π h·ª£p nh·∫•t v·ªõi b·∫°n
            </p>
          </motion.div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {contactMethods.map((method, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                viewport={{ once: true }}
                className="group">
                {method.link ? (
                  <a
                    href={method.link}
                    target={
                      method.link.startsWith("http") ? "_blank" : undefined
                    }
                    rel={
                      method.link.startsWith("http")
                        ? "noopener noreferrer"
                        : undefined
                    }
                    className="block bg-white rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 border border-gray-100">
                    <div
                      className={`inline-flex items-center justify-center w-16 h-16 ${method.color} text-white rounded-xl mb-6 group-hover:scale-110 transition-transform duration-300`}>
                      {method.icon}
                    </div>
                    <h3 className="text-xl font-bold text-gray-900 mb-2">
                      {method.title}
                    </h3>
                    <p className="text-lg font-semibold text-gray-700 mb-2">
                      {method.content}
                    </p>
                    <p className="text-gray-500">{method.description}</p>
                  </a>
                ) : (
                  <div className="block bg-white rounded-2xl p-8 shadow-lg border border-gray-100">
                    <div
                      className={`inline-flex items-center justify-center w-16 h-16 ${method.color} text-white rounded-xl mb-6`}>
                      {method.icon}
                    </div>
                    <h3 className="text-xl font-bold text-gray-900 mb-2">
                      {method.title}
                    </h3>
                    <p className="text-lg font-semibold text-gray-700 mb-2">
                      {method.content}
                    </p>
                    <p className="text-gray-500">{method.description}</p>
                  </div>
                )}
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Main Contact Section */}
      <section id="contact-form" className="py-20 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-16 items-start">
            {/* Left Column - Contact Form */}
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
              className="relative">
              <div className="bg-white rounded-3xl shadow-2xl overflow-hidden relative">
                {/* Success overlay */}
                {formStatus === "success" && (
                  <motion.div
                    className="absolute inset-0 bg-white bg-opacity-95 flex flex-col items-center justify-center z-20 px-8"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ duration: 0.3 }}>
                    <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mb-6">
                      <svg
                        className="w-10 h-10 text-green-500"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24">
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M5 13l4 4L19 7"
                        />
                      </svg>
                    </div>
                    <h3 className="text-2xl font-bold text-gray-900 mb-4 text-center">
                      C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá!
                    </h3>
                    <p className="text-gray-600 text-center max-w-sm leading-relaxed">
                      Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu v√† s·∫Ω li√™n h·ªá l·∫°i v·ªõi b·∫°n
                      trong th·ªùi gian s·ªõm nh·∫•t.
                    </p>
                  </motion.div>
                )}

                <div className="p-8 lg:p-12">
                  <div className="mb-8">
                    <h2 className="text-3xl font-bold text-gray-900 mb-4">
                      G·ª≠i Y√™u C·∫ßu H·ªó Tr·ª£
                    </h2>
                    <p className="text-gray-600">
                      ƒêi·ªÅn th√¥ng tin b√™n d∆∞·ªõi v√† ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n
                      ngay l·∫≠p t·ª©c
                    </p>
                  </div>

                  <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label
                          htmlFor="fullname"
                          className="block text-sm font-semibold text-gray-700 mb-2">
                          H·ªç v√† t√™n *
                        </label>
                        <input
                          type="text"
                          id="fullname"
                          placeholder="Nh·∫≠p h·ªç v√† t√™n"
                          {...register("fullname", {
                            required: "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n",
                          })}
                          className={`w-full px-4 py-4 rounded-xl border-2 ${
                            errors.fullname
                              ? "border-red-300 focus:border-red-500"
                              : "border-gray-200 focus:border-blue-500"
                          } focus:outline-none transition-colors duration-200 bg-gray-50 focus:bg-white`}
                        />
                        {errors.fullname && (
                          <p className="mt-2 text-sm text-red-600">
                            {errors.fullname.message}
                          </p>
                        )}
                      </div>

                      <div>
                        <label
                          htmlFor="phone"
                          className="block text-sm font-semibold text-gray-700 mb-2">
                          S·ªë ƒëi·ªán tho·∫°i *
                        </label>
                        <input
                          type="tel"
                          id="phone"
                          placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                          {...register("phone", {
                            required: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i",
                          })}
                          className={`w-full px-4 py-4 rounded-xl border-2 ${
                            errors.phone
                              ? "border-red-300 focus:border-red-500"
                              : "border-gray-200 focus:border-blue-500"
                          } focus:outline-none transition-colors duration-200 bg-gray-50 focus:bg-white`}
                        />
                        {errors.phone && (
                          <p className="mt-2 text-sm text-red-600">
                            {errors.phone.message}
                          </p>
                        )}
                      </div>
                    </div>

                    <div>
                      <label
                        htmlFor="email"
                        className="block text-sm font-semibold text-gray-700 mb-2">
                        Email
                      </label>
                      <input
                        type="email"
                        id="email"
                        placeholder="name@example.com"
                        {...register("email", {
                          pattern: {
                            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                            message: "ƒê·ªãa ch·ªâ email kh√¥ng h·ª£p l·ªá",
                          },
                        })}
                        className={`w-full px-4 py-4 rounded-xl border-2 ${
                          errors.email
                            ? "border-red-300 focus:border-red-500"
                            : "border-gray-200 focus:border-blue-500"
                        } focus:outline-none transition-colors duration-200 bg-gray-50 focus:bg-white`}
                      />
                      {errors.email && (
                        <p className="mt-2 text-sm text-red-600">
                          {errors.email.message}
                        </p>
                      )}
                    </div>

                    <div>
                      <label
                        htmlFor="service"
                        className="block text-sm font-semibold text-gray-700 mb-2">
                        D·ªãch v·ª• c·∫ßn h·ªó tr·ª£
                      </label>
                      <select
                        id="service"
                        {...register("service")}
                        className="w-full px-4 py-4 rounded-xl border-2 border-gray-200 focus:border-blue-500 focus:outline-none transition-colors duration-200 bg-gray-50 focus:bg-white">
                        <option value="">Ch·ªçn d·ªãch v·ª•</option>
                        {services?.map((service) => (
                          <option key={service._id} value={service._id}>
                            {service.name}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label
                        htmlFor="message"
                        className="block text-sm font-semibold text-gray-700 mb-2">
                        M√¥ t·∫£ chi ti·∫øt *
                      </label>
                      <textarea
                        id="message"
                        rows={5}
                        placeholder="M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ c·∫ßn h·ªó tr·ª£..."
                        {...register("message", {
                          required: "Vui l√≤ng m√¥ t·∫£ v·∫•n ƒë·ªÅ c·∫ßn h·ªó tr·ª£",
                        })}
                        className={`w-full px-4 py-4 rounded-xl border-2 ${
                          errors.message
                            ? "border-red-300 focus:border-red-500"
                            : "border-gray-200 focus:border-blue-500"
                        } focus:outline-none transition-colors duration-200 bg-gray-50 focus:bg-white resize-none`}
                      />
                      {errors.message && (
                        <p className="mt-2 text-sm text-red-600">
                          {errors.message.message}
                        </p>
                      )}
                    </div>

                    <div className="flex items-start">
                      <input
                        id="agree"
                        type="checkbox"
                        {...register("agree", {
                          required: "Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n",
                        })}
                        className="w-5 h-5 border-2 border-gray-300 rounded focus:ring-blue-500 text-blue-600 mt-1"
                      />
                      <label
                        htmlFor="agree"
                        className="ml-3 text-sm text-gray-600">
                        T√¥i ƒë·ªìng √Ω v·ªõi{" "}
                        <a
                          href="#"
                          className="text-blue-600 hover:text-blue-700 font-medium">
                          ƒëi·ªÅu kho·∫£n d·ªãch v·ª•
                        </a>{" "}
                        v√†{" "}
                        <a
                          href="#"
                          className="text-blue-600 hover:text-blue-700 font-medium">
                          ch√≠nh s√°ch b·∫£o m·∫≠t
                        </a>
                      </label>
                    </div>
                    {errors.agree && (
                      <p className="text-sm text-red-600">
                        {errors.agree.message}
                      </p>
                    )}

                    <button
                      type="submit"
                      disabled={formStatus === "submitting"}
                      className={`w-full py-4 px-8 bg-gradient-to-r from-blue-600 to-indigo-600 text-white font-semibold rounded-xl transition-all duration-300 transform hover:shadow-lg ${
                        formStatus === "submitting"
                          ? "opacity-70 cursor-not-allowed"
                          : "hover:-translate-y-1 hover:from-blue-700 hover:to-indigo-700"
                      }`}>
                      {formStatus === "submitting" ? (
                        <div className="flex items-center justify-center">
                          <svg
                            className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24">
                            <circle
                              className="opacity-25"
                              cx="12"
                              cy="12"
                              r="10"
                              stroke="currentColor"
                              strokeWidth="4"></circle>
                            <path
                              className="opacity-75"
                              fill="currentColor"
                              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          ƒêang g·ª≠i...
                        </div>
                      ) : (
                        <div className="flex items-center justify-center">
                          <svg
                            className="w-5 h-5 mr-3"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24">
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth="2"
                              d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
                            />
                          </svg>
                          G·ª≠i y√™u c·∫ßu
                        </div>
                      )}
                    </button>
                  </form>
                </div>
              </div>
            </motion.div>

            {/* Right Column - Features & Info */}
            <motion.div
              initial={{ opacity: 0, x: 30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
              className="space-y-8">
              <div>
                <h3 className="text-2xl font-bold text-gray-900 mb-6">
                  T·∫°i Sao Ch·ªçn K-Care?
                </h3>
                <div className="space-y-6">
                  {features.map((feature, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 20 }}
                      whileInView={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.5, delay: index * 0.1 }}
                      viewport={{ once: true }}
                      className="flex items-start p-6 bg-white rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300">
                      <div className="flex-shrink-0 w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 text-white rounded-xl flex items-center justify-center mr-6">
                        {feature.icon}
                      </div>
                      <div>
                        <h4 className="text-xl font-bold text-gray-900 mb-2">
                          {feature.title}
                        </h4>
                        <p className="text-gray-600">{feature.description}</p>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>

              {/* Quick Stats */}
              <div className="bg-gradient-to-br from-blue-600 to-indigo-700 rounded-3xl p-8 text-white">
                <h4 className="text-2xl font-bold mb-6 text-center">
                  Th·ªëng K√™ D·ªãch V·ª•
                </h4>
                <div className="grid grid-cols-2 gap-8">
                  <div className="text-center">
                    <div className="text-4xl font-bold mb-2">1000+</div>
                    <div className="text-blue-100">Kh√°ch h√†ng</div>
                  </div>
                  <div className="text-center">
                    <div className="text-4xl font-bold mb-2">24/7</div>
                    <div className="text-blue-100">H·ªó tr·ª£</div>
                  </div>
                  <div className="text-center">
                    <div className="text-4xl font-bold mb-2">98%</div>
                    <div className="text-blue-100">H√†i l√≤ng</div>
                  </div>
                  <div className="text-center">
                    <div className="text-4xl font-bold mb-2">5‚≠ê</div>
                    <div className="text-blue-100">ƒê√°nh gi√°</div>
                  </div>
                </div>
              </div>

              {/* Emergency Contact */}
              <div className="bg-red-50 border-2 border-red-200 rounded-2xl p-6">
                <div className="flex items-center mb-4">
                  <div className="w-12 h-12 bg-red-500 text-white rounded-full flex items-center justify-center mr-4">
                    <svg
                      className="w-6 h-6"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24">
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 18.5c-.77.833.192 2.5 1.732 2.5z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h4 className="text-lg font-bold text-red-800">
                      C·∫ßn H·ªó Tr·ª£ Kh·∫©n C·∫•p?
                    </h4>
                    <p className="text-red-600">Li√™n h·ªá ngay hotline 24/7</p>
                  </div>
                </div>
                <a
                  href="tel:+84865421607"
                  className="block w-full text-center py-3 bg-red-500 text-white font-semibold rounded-xl hover:bg-red-600 transition-colors duration-200">
                  G·ªçi ngay: +84 86 54 216 07
                </a>
              </div>
            </motion.div>
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="py-20 bg-white">
        <div className="container mx-auto px-4">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            viewport={{ once: true }}
            className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              C√¢u H·ªèi Th∆∞·ªùng G·∫∑p
            </h2>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Nh·ªØng th·∫Øc m·∫Øc ph·ªï bi·∫øn t·ª´ kh√°ch h√†ng
            </p>
          </motion.div>

          <div className="max-w-4xl mx-auto space-y-4">
            {[
              {
                question: "Th·ªùi gian ph·∫£n h·ªìi y√™u c·∫ßu s·ª≠a ch·ªØa l√† bao l√¢u?",
                answer:
                  "Ch√∫ng t√¥i cam k·∫øt ph·∫£n h·ªìi trong v√≤ng 30 ph√∫t k·ªÉ t·ª´ khi nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu. ƒê·ªëi v·ªõi c√°c tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p, th·ªùi gian n√†y c√≥ th·ªÉ nhanh h∆°n.",
              },
              {
                question: "C√≥ t√≠nh ph√≠ t∆∞ v·∫•n kh√¥ng?",
                answer:
                  "T∆∞ v·∫•n qua ƒëi·ªán tho·∫°i v√† ƒë√°nh gi√° s∆° b·ªô ho√†n to√†n mi·ªÖn ph√≠. Ch·ªâ t√≠nh ph√≠ khi b·∫°n ƒë·ªìng √Ω s·ª≠ d·ª•ng d·ªãch v·ª• s·ª≠a ch·ªØa.",
              },
              {
                question: "C√≥ b·∫£o h√†nh cho d·ªãch v·ª• s·ª≠a ch·ªØa kh√¥ng?",
                answer:
                  "C√≥, ch√∫ng t√¥i b·∫£o h√†nh t·ª´ 3-12 th√°ng t√πy theo lo·∫°i d·ªãch v·ª• v√† linh ki·ªán thay th·∫ø. B·∫£o h√†nh bao g·ªìm c·∫£ ph√≠ c√¥ng v√† ph√≠ thay th·∫ø.",
              },
              {
                question: "C√≥ h·ªó tr·ª£ s·ª≠a ch·ªØa t·∫°i nh√† kh√¥ng?",
                answer:
                  "C√≥, ch√∫ng t√¥i cung c·∫•p d·ªãch v·ª• s·ª≠a ch·ªØa t·∫°i nh√† v·ªõi ph√≠ di chuy·ªÉn h·ª£p l√Ω. K·ªπ thu·∫≠t vi√™n s·∫Ω mang theo ƒë·∫ßy ƒë·ªß d·ª•ng c·ª• v√† linh ki·ªán c·∫ßn thi·∫øt.",
              },
            ].map((faq, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                viewport={{ once: true }}
                className="bg-gray-50 rounded-2xl overflow-hidden">
                <details className="group">
                  <summary className="flex justify-between items-center p-6 cursor-pointer list-none font-semibold text-gray-900 hover:bg-gray-100 transition-colors duration-200">
                    <span className="text-lg">{faq.question}</span>
                    <span className="transition-transform duration-300 group-open:rotate-180">
                      <svg
                        className="w-6 h-6 text-gray-500"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24">
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M19 9l-7 7-7-7"
                        />
                      </svg>
                    </span>
                  </summary>
                  <div className="px-6 pb-6 text-gray-600 leading-relaxed">
                    {faq.answer}
                  </div>
                </details>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      <Footer />
    </div>
  );
}

export default Contact;
